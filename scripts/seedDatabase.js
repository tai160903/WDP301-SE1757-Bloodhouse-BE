const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

// Import models
const User = require('../src/models/user.model');
const Facility = require('../src/models/facility.model');
const FacilityStaff = require('../src/models/facilityStaff.model');
const BloodGroup = require('../src/models/bloodGroup.model');
const BloodComponent = require('../src/models/bloodComponent.model');
const BloodDonationRegistration = require('../src/models/bloodDonationRegistration.model');
const BloodDonation = require('../src/models/bloodDonation.model');
const HealthCheck = require('../src/models/healthCheck.model');
const ProcessDonationLog = require('../src/models/processDonationLog.model');
const BloodUnit = require('../src/models/bloodUnit.model');
const BloodInventory = require('../src/models/bloodInventory.model');
const BloodRequest = require('../src/models/bloodRequest.model');
const BloodRequestSupport = require('../src/models/bloodRequestSupport.model');

// Import Gift models
const GiftItem = require('../src/models/giftItem.model');
const GiftPackage = require('../src/models/giftPackage.model');
const GiftInventory = require('../src/models/giftInventory.model');
const GiftBudget = require('../src/models/giftBudget.model');
const GiftDistribution = require('../src/models/giftDistribution.model');
const GiftLog = require('../src/models/giftLog.model');

// Import constants
const {
  USER_ROLE,
  STAFF_POSITION,
  BLOOD_GROUP,
  SEX,
  USER_STATUS,
  PROFILE_LEVEL,
  BLOOD_DONATION_REGISTRATION_STATUS,
  BLOOD_DONATION_REGISTRATION_SOURCE,
  BLOOD_COMPONENT,
  BLOOD_DONATION_STATUS,
  HEALTH_CHECK_STATUS,
  BLOOD_UNIT_STATUS,
  TEST_BLOOD_UNIT_RESULT,
  BLOOD_REQUEST_STATUS,
  GIFT_ITEM_CATEGORY,
  GIFT_ITEM_UNIT,
  GIFT_ACTION
} = require('../src/constants/enum');

// MongoDB connection string - adjust as needed
const MONGODB_URI ='mongodb://localhost:27017/bloodhouse';

async function connectDB() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error);
    process.exit(1);
  }
}

async function clearDatabase() {
  try {
    await User.deleteMany({});
    await Facility.deleteMany({});
    await FacilityStaff.deleteMany({});
    await BloodGroup.deleteMany({});
    await BloodComponent.deleteMany({});
    await BloodDonationRegistration.deleteMany({});
    await BloodDonation.deleteMany({});
    await HealthCheck.deleteMany({});
    await ProcessDonationLog.deleteMany({});
    await BloodUnit.deleteMany({});
    await BloodInventory.deleteMany({});
    await BloodRequest.deleteMany({});
    await BloodRequestSupport.deleteMany({});
    
    // Clear gift data
    await GiftItem.deleteMany({});
    await GiftPackage.deleteMany({});
    await GiftInventory.deleteMany({});
    await GiftBudget.deleteMany({});
    await GiftDistribution.deleteMany({});
    await GiftLog.deleteMany({});
    
    console.log('üßπ Database cleared');
  } catch (error) {
    console.error('‚ùå Error clearing database:', error);
    throw error;
  }
}

async function createBloodGroups() {
  const bloodGroups = [
    {
      name: BLOOD_GROUP.O_POSITIVE,
      populationRate: 37.4,
      characteristics: ['Universal donor for red cells', 'Most common blood type'],
      note: 'M√°u O+ l√† nh√≥m m√°u ph·ªï bi·∫øn nh·∫•t'
    },
    {
      name: BLOOD_GROUP.A_POSITIVE,
      populationRate: 35.7,
      characteristics: ['Can donate to A+ and AB+', 'Can receive from A and O'],
      note: 'Nh√≥m m√°u A+ ph·ªï bi·∫øn th·ª© hai'
    },
    {
      name: BLOOD_GROUP.B_POSITIVE,
      populationRate: 8.5,
      characteristics: ['Can donate to B+ and AB+', 'Can receive from B and O'],
      note: 'Nh√≥m m√°u B+ √≠t ph·ªï bi·∫øn h∆°n'
    },
    {
      name: BLOOD_GROUP.AB_POSITIVE,
      populationRate: 3.4,
      characteristics: ['Universal plasma donor', 'Can receive from all blood types'],
      note: 'Nh√≥m m√°u AB+ l√† ng∆∞·ªùi nh·∫≠n ƒëa nƒÉng'
    },
    {
      name: BLOOD_GROUP.O_NEGATIVE,
      populationRate: 6.6,
      characteristics: ['Universal donor', 'Can only receive from O-'],
      note: 'Nh√≥m m√°u O- l√† ng∆∞·ªùi cho ƒëa nƒÉng'
    },
    {
      name: BLOOD_GROUP.A_NEGATIVE,
      populationRate: 6.3,
      characteristics: ['Can donate to A and AB', 'Can only receive from A- and O-'],
      note: 'Nh√≥m m√°u A- hi·∫øm g·∫∑p'
    },
    {
      name: BLOOD_GROUP.B_NEGATIVE,
      populationRate: 1.5,
      characteristics: ['Can donate to B and AB', 'Can only receive from B- and O-'],
      note: 'Nh√≥m m√°u B- r·∫•t hi·∫øm'
    },
    {
      name: BLOOD_GROUP.AB_NEGATIVE,
      populationRate: 0.6,
      characteristics: ['Rarest blood type', 'Universal plasma donor'],
      note: 'Nh√≥m m√°u AB- hi·∫øm nh·∫•t'
    }
  ];

  const createdBloodGroups = await BloodGroup.insertMany(bloodGroups);
  console.log(`‚úÖ Created ${createdBloodGroups.length} blood groups`);
  return createdBloodGroups;
}

async function createBloodComponents() {
  const bloodComponents = [
    {
      name: BLOOD_COMPONENT.WHOLE
    },
    {
      name: BLOOD_COMPONENT.RED_CELLS
    },
    {
      name: BLOOD_COMPONENT.PLASMA
    },
    {
      name: BLOOD_COMPONENT.PLATELETS
    }
  ];

  const createdBloodComponents = await BloodComponent.insertMany(bloodComponents);
  console.log(`‚úÖ Created ${createdBloodComponents.length} blood components`);
  return createdBloodComponents;
}

async function createFacilities() {
  const facilities = [
    {
      name: 'B·ªánh vi·ªán Ch·ª£ R·∫´y - Khoa Huy·∫øt h·ªçc',
      code: 'CR_BLOOD_001',
      address: '201B Nguy·ªÖn Ch√≠ Thanh, Ph∆∞·ªùng 12, Qu·∫≠n 5, TP.HCM',
      location: {
        type: 'Point',
        coordinates: [106.6583, 10.7554] // Longitude, Latitude c·ªßa Ch·ª£ R·∫´y
      },
      avgRating: 4.6,
      totalFeedback: 1850,
      contactPhone: '028-38551281',
      contactEmail: 'huyethoc@choray.vn',
      isActive: true
    },
    {
      name: 'Vi·ªán Huy·∫øt h·ªçc - Truy·ªÅn m√°u TP.HCM',
      code: 'IHTTM_HCM_001',
      address: '118 H·ªìng B√†ng, Ph∆∞·ªùng 12, Qu·∫≠n 5, TP.HCM',
      location: {
        type: 'Point',
        coordinates: [106.6544, 10.7614] // Longitude, Latitude c·ªßa Vi·ªán Huy·∫øt h·ªçc HCM
      },
      avgRating: 4.8,
      totalFeedback: 1420,
      contactPhone: '028-38554269',
      contactEmail: 'contact@ihttm-hcm.org.vn',
      isActive: true
    }
  ];

  const createdFacilities = await Facility.insertMany(facilities);
  console.log(`‚úÖ Created ${createdFacilities.length} facilities`);
  return createdFacilities;
}

async function createUsers(bloodGroups) {
  const saltRounds = 10;
  const defaultPassword = await bcrypt.hash('password123', saltRounds);

  // Create 20 users with different roles
  const users = [
    // 2 ADMIN users
    {
      email: 'admin1@bloodhouse.vn',
      password: defaultPassword,
      role: USER_ROLE.ADMIN,
      fullName: 'Nguy·ªÖn VƒÉn Admin',
      phone: '0901111111',
      sex: SEX.MALE,
      yob: new Date('1985-05-15'),
      bloodId: bloodGroups[0]._id, // O+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001085012345',
      address: 'S·ªë 1 Tr·∫ßn H∆∞ng ƒê·∫°o, Ho√†n Ki·∫øm, H√† N·ªôi'
    },
    {
      email: 'admin2@bloodhouse.vn',
      password: defaultPassword,
      role: USER_ROLE.ADMIN,
      fullName: 'Tr·∫ßn Th·ªã Admin',
      phone: '0901111112',
      sex: SEX.FEMALE,
      yob: new Date('1988-03-20'),
      bloodId: bloodGroups[1]._id, // A+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001088032001',
      address: 'S·ªë 10 L√°ng H·∫°, ƒê·ªëng ƒêa, H√† N·ªôi'
    },
    
    // 2 MANAGER users (will be assigned to facilities)
    {
      email: 'manager1@choray.vn',
      password: defaultPassword,
      role: USER_ROLE.MANAGER,
      fullName: 'L√™ VƒÉn Qu·∫£n L√Ω',
      phone: '0902222221',
      sex: SEX.MALE,
      yob: new Date('1982-07-10'),
      bloodId: bloodGroups[2]._id, // B+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001082071001',
      address: '201B Nguy·ªÖn Ch√≠ Thanh, Ph∆∞·ªùng 12, Qu·∫≠n 5, TP.HCM'
    },
    {
      email: 'manager2@ihttm-hcm.vn',
      password: defaultPassword,
      role: USER_ROLE.MANAGER,
      fullName: 'Ph·∫°m Th·ªã Qu·∫£n L√Ω',
      phone: '0902222222',
      sex: SEX.FEMALE,
      yob: new Date('1984-11-25'),
      bloodId: bloodGroups[3]._id, // AB+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001084112502',
      address: '118 H·ªìng B√†ng, Ph∆∞·ªùng 12, Qu·∫≠n 5, TP.HCM'
    },

    // 4 DOCTOR users (2 for each facility)
    {
      email: 'doctor1@choray.vn',
      password: defaultPassword,
      role: USER_ROLE.DOCTOR,
      fullName: 'BS. Nguy·ªÖn VƒÉn B√°c Sƒ©',
      phone: '0903333331',
      sex: SEX.MALE,
      yob: new Date('1980-01-15'),
      bloodId: bloodGroups[4]._id, // O-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001080011501',
      address: 'S·ªë 45 L√™ L·ª£i, Qu·∫≠n 1, TP.HCM'
    },
    {
      email: 'doctor2@choray.vn',
      password: defaultPassword,
      role: USER_ROLE.DOCTOR,
      fullName: 'BS. Tr·∫ßn Th·ªã B√°c Sƒ©',
      phone: '0903333332',
      sex: SEX.FEMALE,
      yob: new Date('1983-06-30'),
      bloodId: bloodGroups[5]._id, // A-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001083063002',
      address: 'S·ªë 123 V√µ VƒÉn T·∫ßn, Qu·∫≠n 3, TP.HCM'
    },
    {
      email: 'doctor3@ihttm-hcm.vn',
      password: defaultPassword,
      role: USER_ROLE.DOCTOR,
      fullName: 'BS. L√™ VƒÉn B√°c Sƒ©',
      phone: '0903333333',
      sex: SEX.MALE,
      yob: new Date('1981-09-12'),
      bloodId: bloodGroups[6]._id, // B-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001081091203',
      address: 'S·ªë 67 Pasteur, Qu·∫≠n 1, TP.HCM'
    },
    {
      email: 'doctor4@ihttm-hcm.vn',
      password: defaultPassword,
      role: USER_ROLE.DOCTOR,
      fullName: 'BS. Ph·∫°m Th·ªã B√°c Sƒ©',
      phone: '0903333334',
      sex: SEX.FEMALE,
      yob: new Date('1986-12-05'),
      bloodId: bloodGroups[7]._id, // AB-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001086120504',
      address: 'S·ªë 89 Nguy·ªÖn Th·ªã Minh Khai, Qu·∫≠n 3, TP.HCM'
    },

    // 6 NURSE users (3 for each facility)
    {
      email: 'nurse1@choray.vn',
      password: defaultPassword,
      role: USER_ROLE.NURSE,
      fullName: 'Y t√° Nguy·ªÖn Th·ªã ƒêi·ªÅu D∆∞·ª°ng',
      phone: '0904444441',
      sex: SEX.FEMALE,
      yob: new Date('1990-02-14'),
      bloodId: bloodGroups[0]._id, // O+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001090021401',
      address: 'S·ªë 234 ƒêi·ªán Bi√™n Ph·ªß, Qu·∫≠n 10, TP.HCM'
    },
    {
      email: 'nurse2@choray.vn',
      password: defaultPassword,
      role: USER_ROLE.NURSE,
      fullName: 'Y t√° Tr·∫ßn Th·ªã ƒêi·ªÅu D∆∞·ª°ng',
      phone: '0904444442',
      sex: SEX.FEMALE,
      yob: new Date('1992-08-22'),
      bloodId: bloodGroups[1]._id, // A+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001092082202',
      address: 'S·ªë 156 C·ªông H√≤a, Qu·∫≠n T√¢n B√¨nh, TP.HCM'
    },
    {
      email: 'nurse3@choray.vn',
      password: defaultPassword,
      role: USER_ROLE.NURSE,
      fullName: 'Y t√° L√™ VƒÉn ƒêi·ªÅu D∆∞·ª°ng',
      phone: '0904444443',
      sex: SEX.MALE,
      yob: new Date('1991-04-18'),
      bloodId: bloodGroups[2]._id, // B+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001091041803',
      address: 'S·ªë 78 Ho√†ng VƒÉn Th·ª•, Qu·∫≠n Ph√∫ Nhu·∫≠n, TP.HCM'
    },
    {
      email: 'nurse4@ihttm-hcm.vn',
      password: defaultPassword,
      role: USER_ROLE.NURSE,
      fullName: 'Y t√° Ph·∫°m Th·ªã ƒêi·ªÅu D∆∞·ª°ng',
      phone: '0904444444',
      sex: SEX.FEMALE,
      yob: new Date('1989-10-30'),
      bloodId: bloodGroups[3]._id, // AB+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001089103004',
      address: 'S·ªë 345 L·∫°c Long Qu√¢n, Qu·∫≠n 11, TP.HCM'
    },
    {
      email: 'nurse5@ihttm-hcm.vn',
      password: defaultPassword,
      role: USER_ROLE.NURSE,
      fullName: 'Y t√° Ho√†ng Th·ªã ƒêi·ªÅu D∆∞·ª°ng',
      phone: '0904444445',
      sex: SEX.FEMALE,
      yob: new Date('1993-07-16'),
      bloodId: bloodGroups[4]._id, // O-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001093071605',
      address: 'S·ªë 567 √Çu C∆°, Qu·∫≠n T√¢n Ph√∫, TP.HCM'
    },
    {
      email: 'nurse6@ihttm-hcm.vn',
      password: defaultPassword,
      role: USER_ROLE.NURSE,
      fullName: 'Y t√° V≈© VƒÉn ƒêi·ªÅu D∆∞·ª°ng',
      phone: '0904444446',
      sex: SEX.MALE,
      yob: new Date('1990-12-08'),
      bloodId: bloodGroups[5]._id, // A-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001090120806',
      address: 'S·ªë 89 Phan VƒÉn Tr·ªã, Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM'
    },

    // 6 MEMBER users (blood donors)
    {
      email: 'donor1@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'Nguy·ªÖn VƒÉn Hi·∫øn',
      phone: '0905555551',
      sex: SEX.MALE,
      yob: new Date('1995-03-12'),
      bloodId: bloodGroups[0]._id, // O+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001095031201',
      address: 'S·ªë 123 L√Ω T·ª± Tr·ªçng, Qu·∫≠n 1, TP.HCM',
      isAvailable: true
    },
    {
      email: 'donor2@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'Tr·∫ßn Th·ªã Hi·∫øn',
      phone: '0905555552',
      sex: SEX.FEMALE,
      yob: new Date('1994-09-25'),
      bloodId: bloodGroups[1]._id, // A+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001094092502',
      address: 'S·ªë 456 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP.HCM',
      isAvailable: true
    },
    {
      email: 'donor3@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'L√™ VƒÉn Hi·∫øn',
      phone: '0905555553',
      sex: SEX.MALE,
      yob: new Date('1992-11-18'),
      bloodId: bloodGroups[2]._id, // B+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001092111803',
      address: 'S·ªë 789 Tr∆∞·ªùng Chinh, Qu·∫≠n T√¢n B√¨nh, TP.HCM',
      isAvailable: true
    },
    {
      email: 'donor4@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'Ph·∫°m Th·ªã Hi·∫øn',
      phone: '0905555554',
      sex: SEX.FEMALE,
      yob: new Date('1996-01-07'),
      bloodId: bloodGroups[3]._id, // AB+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001096010704',
      address: 'S·ªë 234 Quang Trung, Qu·∫≠n G√≤ V·∫•p, TP.HCM',
      isAvailable: true
    },
    {
      email: 'donor5@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'Ho√†ng VƒÉn Hi·∫øn',
      phone: '0905555555',
      sex: SEX.MALE,
      yob: new Date('1993-06-14'),
      bloodId: bloodGroups[4]._id, // O-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001093061405',
      address: 'S·ªë 567 Ph·∫°m VƒÉn ƒê·ªìng, Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM',
      isAvailable: true
    },
    {
      email: 'donor6@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'V≈© Th·ªã Hi·∫øn',
      phone: '0905555556',
      sex: SEX.FEMALE,
      yob: new Date('1997-04-22'),
      bloodId: bloodGroups[5]._id, // A-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001097042206',
      address: 'S·ªë 890 L√™ VƒÉn Vi·ªát, Qu·∫≠n 9, TP.HCM',
      isAvailable: true
    },
    
    // 4 additional MEMBER users (blood donors) - Total 10 donors
    {
      email: 'donor7@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'ƒê·∫∑ng VƒÉn Hi·∫øn',
      phone: '0905555557',
      sex: SEX.MALE,
      yob: new Date('1991-08-15'),
      bloodId: bloodGroups[6]._id, // B-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001091081507',
      address: 'S·ªë 123 V√µ Th·ªã S√°u, Qu·∫≠n 3, TP.HCM',
      isAvailable: true
    },
    {
      email: 'donor8@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'B√πi Th·ªã Hi·∫øn',
      phone: '0905555558',
      sex: SEX.FEMALE,
      yob: new Date('1995-12-03'),
      bloodId: bloodGroups[7]._id, // AB-
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001095120308',
      address: 'S·ªë 456 L√™ Th√°nh T√¥n, Qu·∫≠n 1, TP.HCM',
      isAvailable: true
    },
    {
      email: 'donor9@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'Cao VƒÉn Hi·∫øn',
      phone: '0905555559',
      sex: SEX.MALE,
      yob: new Date('1990-05-28'),
      bloodId: bloodGroups[0]._id, // O+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001090052809',
      address: 'S·ªë 789 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM',
      isAvailable: true
    },
    {
      email: 'donor10@gmail.com',
      password: defaultPassword,
      role: USER_ROLE.MEMBER,
      fullName: 'Mai Th·ªã Hi·∫øn',
      phone: '0905555560',
      sex: SEX.FEMALE,
      yob: new Date('1993-10-16'),
      bloodId: bloodGroups[1]._id, // A+
      status: USER_STATUS.ACTIVE,
      profileLevel: PROFILE_LEVEL.VERIFIED_CCCD,
      idCard: '001093101610',
      address: 'S·ªë 345 Hai B√† Tr∆∞ng, Qu·∫≠n 1, TP.HCM',
      isAvailable: true
    }
  ];

  const createdUsers = await User.insertMany(users);
  console.log(`‚úÖ Created ${createdUsers.length} users`);
  return createdUsers;
}

async function createFacilityStaff(users, facilities) {
  const facilityStaffData = [];

  // Find users by role
  const managers = users.filter(user => user.role === USER_ROLE.MANAGER);
  const doctors = users.filter(user => user.role === USER_ROLE.DOCTOR);
  const nurses = users.filter(user => user.role === USER_ROLE.NURSE);

  // Assign staff to Facility 1 (Ch·ª£ R·∫´y)
  const facility1 = facilities[0];
  
  console.log(`üè• Assigning staff to ${facility1.name} (${facility1._id})`);
  
  // 1 Manager for facility 1
  facilityStaffData.push({
    userId: managers[0]._id,
    facilityId: facility1._id,
    position: STAFF_POSITION.MANAGER,
    assignedAt: new Date('2024-01-01')
  });

  // 2 Doctors for facility 1
  facilityStaffData.push({
    userId: doctors[0]._id,
    facilityId: facility1._id,
    position: STAFF_POSITION.DOCTOR,
    assignedAt: new Date('2024-01-01')
  });
  facilityStaffData.push({
    userId: doctors[1]._id,
    facilityId: facility1._id,
    position: STAFF_POSITION.DOCTOR,
    assignedAt: new Date('2024-01-01')
  });

  // 3 Nurses for facility 1
  facilityStaffData.push({
    userId: nurses[0]._id,
    facilityId: facility1._id,
    position: STAFF_POSITION.NURSE,
    assignedAt: new Date('2024-01-01')
  });
  facilityStaffData.push({
    userId: nurses[1]._id,
    facilityId: facility1._id,
    position: STAFF_POSITION.NURSE,
    assignedAt: new Date('2024-01-01')
  });
  facilityStaffData.push({
    userId: nurses[2]._id,
    facilityId: facility1._id,
    position: STAFF_POSITION.NURSE,
    assignedAt: new Date('2024-01-01')
  });

  // Assign staff to Facility 2 (Vi·ªán Huy·∫øt h·ªçc)
  const facility2 = facilities[1];
  
  console.log(`üè• Assigning staff to ${facility2.name} (${facility2._id})`);
  
  // 1 Manager for facility 2
  facilityStaffData.push({
    userId: managers[1]._id,
    facilityId: facility2._id,
    position: STAFF_POSITION.MANAGER,
    assignedAt: new Date('2024-01-01')
  });

  // 2 Doctors for facility 2
  facilityStaffData.push({
    userId: doctors[2]._id,
    facilityId: facility2._id,
    position: STAFF_POSITION.DOCTOR,
    assignedAt: new Date('2024-01-01')
  });
  facilityStaffData.push({
    userId: doctors[3]._id,
    facilityId: facility2._id,
    position: STAFF_POSITION.DOCTOR,
    assignedAt: new Date('2024-01-01')
  });

  // 3 Nurses for facility 2
  facilityStaffData.push({
    userId: nurses[3]._id,
    facilityId: facility2._id,
    position: STAFF_POSITION.NURSE,
    assignedAt: new Date('2024-01-01')
  });
  facilityStaffData.push({
    userId: nurses[4]._id,
    facilityId: facility2._id,
    position: STAFF_POSITION.NURSE,
    assignedAt: new Date('2024-01-01')
  });
  facilityStaffData.push({
    userId: nurses[5]._id,
    facilityId: facility2._id,
    position: STAFF_POSITION.NURSE,
    assignedAt: new Date('2024-01-01')
  });

  const createdFacilityStaff = await FacilityStaff.insertMany(facilityStaffData);
  console.log(`‚úÖ Created ${createdFacilityStaff.length} facility staff assignments`);
  return createdFacilityStaff;
}

async function createBloodDonationRegistrations(users, facilities, bloodGroups, facilityStaff) {
  const registrations = [];
  
  // Get donor users (MEMBER role) - now we have 10 donors
  const donors = users.filter(user => user.role === USER_ROLE.MEMBER);
  console.log(`üîç Found ${donors.length} donors for registrations`);
  
  if (donors.length === 0) {
    console.error('‚ùå No donors found! Cannot create registrations.');
    return [];
  }
  
  // Get tomorrow and day after tomorrow dates
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  tomorrow.setHours(9, 0, 0, 0); // 9:00 AM
  
  const dayAfterTomorrow = new Date();
  dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);
  dayAfterTomorrow.setHours(10, 0, 0, 0); // 10:00 AM

  console.log(`üìÖ Tomorrow: ${tomorrow.toISOString()}`);
  console.log(`üìÖ Day after tomorrow: ${dayAfterTomorrow.toISOString()}`);

  // Debug facility information
  console.log(`üè• Facility 1 (Ch·ª£ R·∫´y): ${facilities[0].name} - ID: ${facilities[0]._id}`);
  console.log(`üè• Facility 2 (Vi·ªán Huy·∫øt h·ªçc): ${facilities[1].name} - ID: ${facilities[1]._id}`);

  // Get nurse staff for assignment
  const nurseStaffFacility1 = facilityStaff.filter(staff => 
    staff.position === STAFF_POSITION.NURSE && 
    staff.facilityId.toString() === facilities[0]._id.toString()
  );
  const nurseStaffFacility2 = facilityStaff.filter(staff => 
    staff.position === STAFF_POSITION.NURSE && 
    staff.facilityId.toString() === facilities[1]._id.toString()
  );

  console.log(`üë®‚Äç‚öïÔ∏è Nurse staff facility 1: ${nurseStaffFacility1.length}`);
  console.log(`üë®‚Äç‚öïÔ∏è Nurse staff facility 2: ${nurseStaffFacility2.length}`);

  // Create 10 registrations for tomorrow
  // 8 registrations for Facility 1 (Ch·ª£ R·∫´y) - Focus on this facility
  console.log('üè• Creating registrations for tomorrow - Facility 1 (Ch·ª£ R·∫´y)...');
  for (let i = 0; i < 8; i++) {
    const donor = donors[i];
    const preferredDate = new Date(tomorrow);
    preferredDate.setHours(8 + i, 0, 0, 0); // Different time slots from 8:00 to 15:00

    const registration = {
      userId: donor._id,
      facilityId: facilities[0]._id,
      bloodGroupId: donor.bloodId,
      staffId: nurseStaffFacility1[i % nurseStaffFacility1.length]._id,
      preferredDate: preferredDate,
      status: BLOOD_DONATION_REGISTRATION_STATUS.PENDING_APPROVAL,
      source: i % 3 === 0 ? BLOOD_DONATION_REGISTRATION_SOURCE.REQUEST : BLOOD_DONATION_REGISTRATION_SOURCE.VOLUNTARY,
      expectedQuantity: 450,
      notes: `ƒêƒÉng k√Ω hi·∫øn m√°u t·ª´ ${donor.fullName} - ${i % 2 === 0 ? 'L·∫ßn ƒë·∫ßu hi·∫øn m√°u' : 'ƒê√£ hi·∫øn m√°u tr∆∞·ªõc ƒë√¢y'}`,
      location: {
        type: 'Point',
        coordinates: [106.6583, 10.7554] // Ch·ª£ R·∫´y coordinates
      }
    };

    registrations.push(registration);
    console.log(`  ‚úÖ Registration ${i + 1}: ${donor.fullName} at ${preferredDate.toLocaleTimeString()} - Facility: ${facilities[0].name} (${facilities[0]._id})`);
  }

  // 2 registrations for Facility 2 (Vi·ªán Huy·∫øt h·ªçc HCM)
  console.log('üè• Creating registrations for tomorrow - Facility 2 (Vi·ªán Huy·∫øt h·ªçc)...');
  for (let i = 8; i < 10; i++) {
    const donor = donors[i];
    const preferredDate = new Date(tomorrow);
    preferredDate.setHours(14 + (i-8), 0, 0, 0); // Afternoon slots

    const registration = {
      userId: donor._id,
      facilityId: facilities[1]._id,
      bloodGroupId: donor.bloodId,
      staffId: nurseStaffFacility2[(i-8) % nurseStaffFacility2.length]._id,
      preferredDate: preferredDate,
      status: BLOOD_DONATION_REGISTRATION_STATUS.PENDING_APPROVAL,
      source: BLOOD_DONATION_REGISTRATION_SOURCE.VOLUNTARY,
      expectedQuantity: 450,
      notes: `ƒêƒÉng k√Ω hi·∫øn m√°u t·ª´ ${donor.fullName} - T·∫°i Vi·ªán Huy·∫øt h·ªçc`,
      location: {
        type: 'Point',
        coordinates: [106.6544, 10.7614] // Vi·ªán Huy·∫øt h·ªçc HCM coordinates
      }
    };

    registrations.push(registration);
    console.log(`  ‚úÖ Registration ${i + 1}: ${donor.fullName} at ${preferredDate.toLocaleTimeString()} - Facility: ${facilities[1].name} (${facilities[1]._id})`);
  }

  // Create 10 registrations for day after tomorrow
  // 8 registrations for Facility 1 (Ch·ª£ R·∫´y) - Focus on this facility
  console.log('üè• Creating registrations for day after tomorrow - Facility 1 (Ch·ª£ R·∫´y)...');
  for (let i = 0; i < 8; i++) {
    const donor = donors[i];
    const preferredDate = new Date(dayAfterTomorrow);
    preferredDate.setHours(9 + i, 30, 0, 0); // Different time slots from 9:30 to 16:30

    const registration = {
      userId: donor._id,
      facilityId: facilities[0]._id,
      bloodGroupId: donor.bloodId,
      staffId: nurseStaffFacility1[i % nurseStaffFacility1.length]._id,
      preferredDate: preferredDate,
      status: BLOOD_DONATION_REGISTRATION_STATUS.PENDING_APPROVAL,
      source: i % 4 === 0 ? BLOOD_DONATION_REGISTRATION_SOURCE.REQUEST : BLOOD_DONATION_REGISTRATION_SOURCE.VOLUNTARY,
      expectedQuantity: 450,
      notes: `ƒêƒÉng k√Ω hi·∫øn m√°u l·∫ßn 2 t·ª´ ${donor.fullName} - ${Math.random() > 0.5 ? 'Hi·∫øn m√°u ƒë·ªãnh k·ª≥' : 'Hi·∫øn m√°u kh·∫©n c·∫•p'}`,
      location: {
        type: 'Point',
        coordinates: [106.6583, 10.7554] // Ch·ª£ R·∫´y coordinates
      }
    };

    registrations.push(registration);
    console.log(`  ‚úÖ Registration ${i + 11}: ${donor.fullName} at ${preferredDate.toLocaleTimeString()} - Facility: ${facilities[0].name} (${facilities[0]._id})`);
  }

  // 2 registrations for Facility 2 (Vi·ªán Huy·∫øt h·ªçc HCM)
  console.log('üè• Creating registrations for day after tomorrow - Facility 2 (Vi·ªán Huy·∫øt h·ªçc)...');
  for (let i = 8; i < 10; i++) {
    const donor = donors[i];
    const preferredDate = new Date(dayAfterTomorrow);
    preferredDate.setHours(10 + (i-8) * 2, 0, 0, 0); // Morning slots

    const registration = {
      userId: donor._id,
      facilityId: facilities[1]._id,
      bloodGroupId: donor.bloodId,
      staffId: nurseStaffFacility2[(i-8) % nurseStaffFacility2.length]._id,
      preferredDate: preferredDate,
      status: BLOOD_DONATION_REGISTRATION_STATUS.PENDING_APPROVAL,
      source: BLOOD_DONATION_REGISTRATION_SOURCE.VOLUNTARY,
      expectedQuantity: 450,
      notes: `ƒêƒÉng k√Ω hi·∫øn m√°u l·∫ßn 2 t·ª´ ${donor.fullName} - T·∫°i Vi·ªán Huy·∫øt h·ªçc`,
      location: {
        type: 'Point',
        coordinates: [106.6544, 10.7614] // Vi·ªán Huy·∫øt h·ªçc HCM coordinates
      }
    };

    registrations.push(registration);
    console.log(`  ‚úÖ Registration ${i + 11}: ${donor.fullName} at ${preferredDate.toLocaleTimeString()} - Facility: ${facilities[1].name} (${facilities[1]._id})`);
  }

  console.log(`üìù Total registrations to create: ${registrations.length}`);

  try {
    const createdRegistrations = [];
    
    console.log('üîÑ Creating registrations one by one to ensure unique codes...');
    for (let i = 0; i < registrations.length; i++) {
      const registrationData = registrations[i];
      try {
        const createdRegistration = await BloodDonationRegistration.create(registrationData);
        createdRegistrations.push(createdRegistration);
        console.log(`  ‚úÖ Created registration ${i + 1}/${registrations.length}: ${createdRegistration.code}`);
      } catch (error) {
        console.error(`  ‚ùå Failed to create registration ${i + 1}:`, error.message);
        throw error;
      }
    }
    
    console.log(`‚úÖ Successfully created ${createdRegistrations.length} blood donation registrations`);
    console.log(`   - Tomorrow: 10 registrations (8 for Ch·ª£ R·∫´y, 2 for Vi·ªán Huy·∫øt h·ªçc)`);
    console.log(`   - Day after tomorrow: 10 registrations (8 for Ch·ª£ R·∫´y, 2 for Vi·ªán Huy·∫øt h·ªçc)`);
    return createdRegistrations;
  } catch (error) {
    console.error('‚ùå Error creating registrations:', error);
    throw error;
  }
}

async function verifyData() {
  try {
    console.log('\nüîç Verifying seeded data...');
    
    // Check facilities
    const facilities = await Facility.find().select('_id name code');
    console.log(`üìç Facilities found: ${facilities.length}`);
    facilities.forEach((facility, index) => {
      console.log(`   ${index + 1}. ${facility.name} (${facility.code}) - ID: ${facility._id}`);
    });
    
    // Check registrations and their facility mapping
    const registrations = await BloodDonationRegistration.find()
      .populate('facilityId', 'name code')
      .populate('userId', 'fullName')
      .select('code facilityId userId preferredDate');
    
    console.log(`üìù Registrations found: ${registrations.length}`);
    
    // Group by facility
    const registrationsByFacility = {};
    registrations.forEach(reg => {
      const facilityName = reg.facilityId.name;
      if (!registrationsByFacility[facilityName]) {
        registrationsByFacility[facilityName] = [];
      }
      registrationsByFacility[facilityName].push(reg);
    });
    
    Object.keys(registrationsByFacility).forEach(facilityName => {
      const count = registrationsByFacility[facilityName].length;
      console.log(`   üìç ${facilityName}: ${count} registrations`);
    });

    // Check blood donations
    const bloodDonations = await BloodDonation.find()
      .populate('userId', 'fullName')
      .populate({
        path: 'staffId',
        select: 'facilityId',
        populate: {
          path: 'facilityId',
          select: 'name'
        }
      })
      .select('userId staffId status donationDate quantity code');
    console.log(`ü©∏ Blood Donations found: ${bloodDonations.length}`);
    
    const donationsByStatus = {};
    bloodDonations.forEach(donation => {
      if (!donationsByStatus[donation.status]) {
        donationsByStatus[donation.status] = 0;
      }
      donationsByStatus[donation.status]++;
    });
    
    Object.keys(donationsByStatus).forEach(status => {
      console.log(`   üìä ${status}: ${donationsByStatus[status]} donations`);
    });
    
    // Group by facility through staffId
    const donationsByFacility = {};
    bloodDonations.forEach(donation => {
      if (donation.staffId && donation.staffId.facilityId) {
        const facilityName = donation.staffId.facilityId.name;
        if (!donationsByFacility[facilityName]) {
          donationsByFacility[facilityName] = 0;
        }
        donationsByFacility[facilityName]++;
      }
    });
    
    Object.keys(donationsByFacility).forEach(facilityName => {
      console.log(`   üè• ${facilityName}: ${donationsByFacility[facilityName]} donations`);
    });

    // Check blood requests
    console.log('\nü©∏ Verifying blood request data...');
    const bloodRequests = await BloodRequest.find()
      .populate('userId', 'fullName')
      .populate('facilityId', 'name')
      .populate('groupId', 'name')
      .populate('componentId', 'name')
      .select('userId facilityId groupId componentId status isUrgent quantity needsSupport isFulfilled');
    console.log(`ü©∏ Blood Requests found: ${bloodRequests.length}`);
    
    // Group by facility
    const requestsByFacility = {};
    bloodRequests.forEach(req => {
      const facilityName = req.facilityId.name;
      if (!requestsByFacility[facilityName]) {
        requestsByFacility[facilityName] = [];
      }
      requestsByFacility[facilityName].push(req);
    });
    
    Object.keys(requestsByFacility).forEach(facilityName => {
      const count = requestsByFacility[facilityName].length;
      console.log(`   üè• ${facilityName}: ${count} requests`);
    });
    
    // Group by status
    const requestsByStatus = {};
    bloodRequests.forEach(req => {
      if (!requestsByStatus[req.status]) {
        requestsByStatus[req.status] = 0;
      }
      requestsByStatus[req.status]++;
    });
    
    Object.keys(requestsByStatus).forEach(status => {
      console.log(`   üìä ${status}: ${requestsByStatus[status]} requests`);
    });
    
    // Check urgent requests
    const urgentRequests = bloodRequests.filter(req => req.isUrgent);
    console.log(`   üö® Urgent requests: ${urgentRequests.length}`);
    
    // Check requests needing support
    const requestsNeedingSupport = bloodRequests.filter(req => req.needsSupport);
    console.log(`   ü§ù Requests needing support: ${requestsNeedingSupport.length}`);
    
    // Check blood request supports
    const bloodRequestSupports = await BloodRequestSupport.find()
      .populate('requestId', 'status')
      .populate('userId', 'fullName')
      .select('requestId userId status');
    console.log(`ü§ù Blood Request Supports found: ${bloodRequestSupports.length}`);
    
    // Group supports by status
    const supportsByStatus = {};
    bloodRequestSupports.forEach(support => {
      if (!supportsByStatus[support.status]) {
        supportsByStatus[support.status] = 0;
      }
      supportsByStatus[support.status]++;
    });
    
    Object.keys(supportsByStatus).forEach(status => {
      console.log(`   üìä Support ${status}: ${supportsByStatus[status]} supports`);
    });

    // Check gift management data
    console.log('\nüéÅ Verifying gift management data...');
    
    // Check gift items
    const giftItems = await GiftItem.find().select('name category isActive');
    console.log(`üéØ Gift Items found: ${giftItems.length}`);
    const itemsByCategory = {};
    giftItems.forEach(item => {
      if (!itemsByCategory[item.category]) {
        itemsByCategory[item.category] = 0;
      }
      itemsByCategory[item.category]++;
    });
    Object.keys(itemsByCategory).forEach(category => {
      console.log(`   üì¶ ${category}: ${itemsByCategory[category]} items`);
    });
    
    // Check gift packages
    const giftPackages = await GiftPackage.find()
      .populate('createdBy', 'facilityId')
      .select('name items quantity availableQuantity priority isActive');
    console.log(`üì¶ Gift Packages found: ${giftPackages.length}`);
    
    // Group packages by facility and show quantity info
    const packagesByFacility = {};
    let totalPackageQuantity = 0;
    giftPackages.forEach(pkg => {
      const facilityId = pkg.createdBy?.facilityId?.toString() || 'Unknown';
      if (!packagesByFacility[facilityId]) {
        packagesByFacility[facilityId] = { packages: [], totalQuantity: 0 };
      }
      packagesByFacility[facilityId].packages.push(pkg);
      packagesByFacility[facilityId].totalQuantity += pkg.quantity || 0;
      totalPackageQuantity += pkg.quantity || 0;
    });
    
    console.log(`   üìä Total package quantity across all facilities: ${totalPackageQuantity}`);
    Object.keys(packagesByFacility).forEach(facilityId => {
      const data = packagesByFacility[facilityId];
      console.log(`   üè• Facility ${facilityId}: ${data.packages.length} package types, ${data.totalQuantity} total packages`);
      data.packages.forEach(pkg => {
        console.log(`     - ${pkg.name}: ${pkg.quantity} packages (available: ${pkg.availableQuantity || pkg.quantity})`);
      });
    });
    
    // Check gift inventories
    const giftInventories = await GiftInventory.find()
      .populate('facilityId', 'name')
      .populate('giftItemId', 'name')
      .select('facilityId giftItemId quantity');
    console.log(`üè™ Gift Inventories found: ${giftInventories.length}`);
    
    // Group inventories by facility
    const inventoriesByFacility = {};
    giftInventories.forEach(inv => {
      const facilityName = inv.facilityId.name;
      if (!inventoriesByFacility[facilityName]) {
        inventoriesByFacility[facilityName] = [];
      }
      inventoriesByFacility[facilityName].push(inv);
    });
    
    Object.keys(inventoriesByFacility).forEach(facilityName => {
      const count = inventoriesByFacility[facilityName].length;
      const totalQuantity = inventoriesByFacility[facilityName].reduce((sum, inv) => sum + inv.quantity, 0);
      console.log(`   üè• ${facilityName}: ${count} different items, ${totalQuantity} total quantity`);
    });
    
    // Check gift budgets
    const giftBudgets = await GiftBudget.find()
      .populate('facilityId', 'name')
      .select('facilityId budget spent');
    console.log(`üí∞ Gift Budgets found: ${giftBudgets.length}`);
    giftBudgets.forEach(budget => {
      const percentage = ((budget.spent / budget.budget) * 100).toFixed(1);
      console.log(`   üè• ${budget.facilityId.name}: ${budget.budget.toLocaleString()} VND budget, ${budget.spent.toLocaleString()} VND spent (${percentage}%)`);
    });
    
    // Check gift logs
    const giftLogs = await GiftLog.find().select('action facilityId timestamp');
    console.log(`üìã Gift Logs found: ${giftLogs.length}`);
    const logsByAction = {};
    giftLogs.forEach(log => {
      if (!logsByAction[log.action]) {
        logsByAction[log.action] = 0;
      }
      logsByAction[log.action]++;
    });
    Object.keys(logsByAction).forEach(action => {
      console.log(`   üìù ${action}: ${logsByAction[action]} logs`);
    });
    
    // Check gift distributions
    const giftDistributions = await GiftDistribution.find()
      .populate('packageId', 'name')
      .populate('giftItemId', 'name')
      .populate('userId', 'fullName')
      .select('packageId giftItemId userId quantity distributedAt');
    console.log(`üéÅ Gift Distributions found: ${giftDistributions.length}`);
    
    // Group distributions by type
    const packageDistributions = giftDistributions.filter(dist => dist.packageId);
    const individualDistributions = giftDistributions.filter(dist => !dist.packageId);
    
    console.log(`   üì¶ Package distributions: ${packageDistributions.length}`);
    console.log(`   üéØ Individual distributions: ${individualDistributions.length}`);
    
    if (packageDistributions.length > 0) {
      const packageGroups = {};
      packageDistributions.forEach(dist => {
        const packageName = dist.packageId.name;
        if (!packageGroups[packageName]) {
          packageGroups[packageName] = 0;
        }
        packageGroups[packageName]++;
      });
      Object.keys(packageGroups).forEach(packageName => {
        console.log(`     - ${packageName}: ${packageGroups[packageName]} item distributions`);
      });
    }
    
    console.log('‚úÖ Data verification completed');
    
  } catch (error) {
    console.error('‚ùå Error verifying data:', error);
  }
}

async function createGiftItems() {
  const giftItems = [
    // HEALTH category
    {
      name: 'Vitamin C Tablets',
      description: 'Vi√™n u·ªëng Vitamin C tƒÉng c∆∞·ªùng s·ª©c kh·ªèe sau hi·∫øn m√°u',
      image: 'https://images.unsplash.com/photo-1550572017-edd951aa8462?w=400',
      unit: GIFT_ITEM_UNIT.BOX,
      category: GIFT_ITEM_CATEGORY.HEALTH,
      costPerUnit: 25000
    },
    {
      name: 'Iron Supplement',
      description: 'Vi√™n b·ªï sung s·∫Øt gi√∫p ph·ª•c h·ªìi sau hi·∫øn m√°u',
      image: 'https://images.unsplash.com/photo-1584308666744-24d5c474f2ae?w=400',
      unit: GIFT_ITEM_UNIT.BOX,
      category: GIFT_ITEM_CATEGORY.HEALTH,
      costPerUnit: 35000
    },
    {
      name: 'Multivitamin Complex',
      description: 'T·ªïng h·ª£p vitamin v√† kho√°ng ch·∫•t thi·∫øt y·∫øu',
      image: 'https://images.unsplash.com/photo-1556228453-ecd73c6a1b75?w=400',
      unit: GIFT_ITEM_UNIT.BOX,
      category: GIFT_ITEM_CATEGORY.HEALTH,
      costPerUnit: 45000
    },

    // FOOD category
    {
      name: 'Protein Bar',
      description: 'Thanh protein dinh d∆∞·ª°ng cho ng∆∞·ªùi hi·∫øn m√°u',
      image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400',
      unit: GIFT_ITEM_UNIT.PACK,
      category: GIFT_ITEM_CATEGORY.FOOD,
      costPerUnit: 15000
    },
    {
      name: 'Nutrition Biscuits',
      description: 'B√°nh quy dinh d∆∞·ª°ng cao c·∫•p',
      image: 'https://images.unsplash.com/photo-1558961363-fa8fdf82db35?w=400',
      unit: GIFT_ITEM_UNIT.PACK,
      category: GIFT_ITEM_CATEGORY.FOOD,
      costPerUnit: 20000
    },
    {
      name: 'Energy Nuts Mix',
      description: 'H·ªón h·ª£p h·∫°t dinh d∆∞·ª°ng tƒÉng nƒÉng l∆∞·ª£ng',
      image: 'https://images.unsplash.com/photo-1559656914-a30970c1affd?w=400',
      unit: GIFT_ITEM_UNIT.BAG,
      category: GIFT_ITEM_CATEGORY.FOOD,
      costPerUnit: 30000
    },

    // BEVERAGE category
    {
      name: 'Coconut Water',
      description: 'N∆∞·ªõc d·ª´a t∆∞∆°i b·ªï sung ƒëi·ªán gi·∫£i',
      image: 'https://images.unsplash.com/photo-1520342868574-5fa3804e551c?w=400',
      unit: GIFT_ITEM_UNIT.ITEM,
      category: GIFT_ITEM_CATEGORY.BEVERAGE,
      costPerUnit: 12000
    },
    {
      name: 'Orange Juice',
      description: 'N∆∞·ªõc cam t∆∞∆°i gi√†u vitamin C',
      image: 'https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?w=400',
      unit: GIFT_ITEM_UNIT.ITEM,
      category: GIFT_ITEM_CATEGORY.BEVERAGE,
      costPerUnit: 18000
    },
    {
      name: 'Sports Drink',
      description: 'ƒê·ªì u·ªëng th·ªÉ thao b·ªï sung ƒëi·ªán gi·∫£i',
      image: 'https://images.unsplash.com/photo-1544787219-7f47ccb76574?w=400',
      unit: GIFT_ITEM_UNIT.ITEM,
      category: GIFT_ITEM_CATEGORY.BEVERAGE,
      costPerUnit: 22000
    },

    // MERCHANDISE category
    {
      name: 'Blood Donor T-shirt',
      description: '√Åo thun cotton in logo ng∆∞·ªùi hi·∫øn m√°u',
      image: 'https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400',
      unit: GIFT_ITEM_UNIT.ITEM,
      category: GIFT_ITEM_CATEGORY.MERCHANDISE,
      costPerUnit: 85000
    },
    {
      name: 'Insulated Water Bottle',
      description: 'B√¨nh n∆∞·ªõc gi·ªØ nhi·ªát th∆∞∆°ng hi·ªáu hi·∫øn m√°u',
      image: 'https://images.unsplash.com/photo-1602143407151-7111542de6e8?w=400',
      unit: GIFT_ITEM_UNIT.ITEM,
      category: GIFT_ITEM_CATEGORY.MERCHANDISE,
      costPerUnit: 120000
    },
    {
      name: 'Eco-friendly Tote Bag',
      description: 'T√∫i v·∫£i canvas th√¢n thi·ªán m√¥i tr∆∞·ªùng',
      image: 'https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=400',
      unit: GIFT_ITEM_UNIT.ITEM,
      category: GIFT_ITEM_CATEGORY.MERCHANDISE,
      costPerUnit: 65000
    },
    {
      name: 'Thank You Card',
      description: 'Thi·ªáp c·∫£m ∆°n ng∆∞·ªùi hi·∫øn m√°u',
      image: 'https://images.unsplash.com/photo-1606092195730-5d7b9af1efc5?w=400',
      unit: GIFT_ITEM_UNIT.ITEM,
      category: GIFT_ITEM_CATEGORY.MERCHANDISE,
      costPerUnit: 8000
    },

    // OTHER category
    {
      name: 'Hand Sanitizer',
      description: 'Gel r·ª≠a tay kh√¥ kh√°ng khu·∫©n',
      image: 'https://images.unsplash.com/photo-1584744982491-665216d95f8b?w=400',
      unit: GIFT_ITEM_UNIT.ITEM,
      category: GIFT_ITEM_CATEGORY.OTHER,
      costPerUnit: 15000
    },
    {
      name: 'Medical Face Mask',
      description: 'Kh·∫©u trang y t·∫ø 3 l·ªõp',
      image: 'https://images.unsplash.com/photo-1584634428647-dced00f83be5?w=400',
      unit: GIFT_ITEM_UNIT.PACK,
      category: GIFT_ITEM_CATEGORY.OTHER,
      costPerUnit: 25000
    }
  ];

  const createdGiftItems = await GiftItem.insertMany(giftItems);
  console.log(`‚úÖ Created ${createdGiftItems.length} gift items`);
  return createdGiftItems;
}

async function createGiftPackages(giftItems, facilityStaff, facilities) {
  // Get manager staff for each facility
  const facility1Managers = facilityStaff.filter(staff => 
    staff.position === STAFF_POSITION.MANAGER && 
    staff.facilityId.toString() === facilities[0]._id.toString()
  );
  const facility2Managers = facilityStaff.filter(staff => 
    staff.position === STAFF_POSITION.MANAGER && 
    staff.facilityId.toString() === facilities[1]._id.toString()
  );

  const giftPackages = [
    // Packages for Facility 1 (Ch·ª£ R·∫´y)
    {
      name: 'G√≥i C·∫£m ∆†n C∆° B·∫£n',
      description: 'G√≥i qu√† c·∫£m ∆°n d√†nh cho ng∆∞·ªùi hi·∫øn m√°u l·∫ßn ƒë·∫ßu',
      facilityId: facilities[0]._id,
      items: [
        { giftItemId: giftItems.find(item => item.name === 'Vitamin C Tablets')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Thank You Card')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Coconut Water')._id, quantity: 1 }
      ],
      quantity: 50, // 50 packages available
      createdBy: facility1Managers[0]._id,
      image: 'https://images.unsplash.com/photo-1549298916-b41d501d3772?w=400',
      priority: 3
    },

    {
      name: 'G√≥i S·ª©c Kh·ªèe Premium',
      description: 'G√≥i qu√† cao c·∫•p d√†nh cho ng∆∞·ªùi hi·∫øn m√°u th∆∞·ªùng xuy√™n',
      facilityId: facilities[0]._id,
      items: [
        { giftItemId: giftItems.find(item => item.name === 'Multivitamin Complex')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Iron Supplement')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Protein Bar')._id, quantity: 2 },
        { giftItemId: giftItems.find(item => item.name === 'Blood Donor T-shirt')._id, quantity: 1 }
      ],
      quantity: 25, // 25 packages available (premium package, fewer quantity)
      createdBy: facility1Managers[0]._id,
      image: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400',
      priority: 5
    },

    {
      name: 'G√≥i An To√†n S·ª©c Kh·ªèe',
      description: 'G√≥i qu√† ch√∫ tr·ªçng v·ªá sinh v√† an to√†n s·ª©c kh·ªèe',
      facilityId: facilities[0]._id,
      items: [
        { giftItemId: giftItems.find(item => item.name === 'Hand Sanitizer')._id, quantity: 2 },
        { giftItemId: giftItems.find(item => item.name === 'Medical Face Mask')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Vitamin C Tablets')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Coconut Water')._id, quantity: 1 }
      ],
      quantity: 40, // 40 packages available
      createdBy: facility1Managers[0]._id,
      image: 'https://images.unsplash.com/photo-1584744982491-665216d95f8b?w=400',
      priority: 1
    },

    {
      name: 'G√≥i Dinh D∆∞·ª°ng Nhanh',
      description: 'G√≥i qu√† nh·ªè g·ªçn cho nh·ªØng l·∫ßn hi·∫øn m√°u nhanh',
      facilityId: facilities[0]._id,
      items: [
        { giftItemId: giftItems.find(item => item.name === 'Nutrition Biscuits')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Orange Juice')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Thank You Card')._id, quantity: 1 }
      ],
      quantity: 75, // 75 packages available (basic package, more quantity)
      createdBy: facility1Managers[0]._id,
      image: 'https://images.unsplash.com/photo-1559656914-a30970c1affd?w=400',
      priority: 2
    },

    // Packages for Facility 2 (Vi·ªán Huy·∫øt h·ªçc)
    {
      name: 'G√≥i TƒÉng NƒÉng L∆∞·ª£ng',
      description: 'G√≥i qu√† gi√∫p ph·ª•c h·ªìi nƒÉng l∆∞·ª£ng nhanh sau hi·∫øn m√°u',
      facilityId: facilities[1]._id,
      items: [
        { giftItemId: giftItems.find(item => item.name === 'Sports Drink')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Energy Nuts Mix')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Nutrition Biscuits')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Vitamin C Tablets')._id, quantity: 1 }
      ],
      quantity: 35, // 35 packages available
      createdBy: facility2Managers[0]._id,
      image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400',
      priority: 4
    },

    {
      name: 'G√≥i Xanh Th√¢n Thi·ªán',
      description: 'G√≥i qu√† th√¢n thi·ªán v·ªõi m√¥i tr∆∞·ªùng',
      facilityId: facilities[1]._id,
      items: [
        { giftItemId: giftItems.find(item => item.name === 'Insulated Water Bottle')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Eco-friendly Tote Bag')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Orange Juice')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Thank You Card')._id, quantity: 1 }
      ],
      quantity: 20, // 20 packages available (eco package with merchandise, fewer quantity)
      createdBy: facility2Managers[0]._id,
      image: 'https://images.unsplash.com/photo-1542601906990-b4d3fb778b09?w=400',
      priority: 2
    },

    {
      name: 'G√≥i Kh·ªüi ƒê·∫ßu T·ªët',
      description: 'G√≥i qu√† ƒë∆°n gi·∫£n cho ng∆∞·ªùi hi·∫øn m√°u m·ªõi',
      facilityId: facilities[1]._id,
      items: [
        { giftItemId: giftItems.find(item => item.name === 'Coconut Water')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Protein Bar')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Hand Sanitizer')._id, quantity: 1 },
        { giftItemId: giftItems.find(item => item.name === 'Thank You Card')._id, quantity: 1 }
      ],
      quantity: 60, // 60 packages available (starter package, high quantity)
      createdBy: facility2Managers[0]._id,
      image: 'https://images.unsplash.com/photo-1549298916-b41d501d3772?w=400',
      priority: 3
    }
  ];

  const createdGiftPackages = await GiftPackage.insertMany(giftPackages);
  console.log(`‚úÖ Created ${createdGiftPackages.length} gift packages with quantities`);
  console.log(`   üìç Facility 1 (Ch·ª£ R·∫´y): 4 packages`);
  console.log(`     - G√≥i C·∫£m ∆†n C∆° B·∫£n: 50 packages`);
  console.log(`     - G√≥i S·ª©c Kh·ªèe Premium: 25 packages`);
  console.log(`     - G√≥i An To√†n S·ª©c Kh·ªèe: 40 packages`);
  console.log(`     - G√≥i Dinh D∆∞·ª°ng Nhanh: 75 packages`);
  console.log(`   üìç Facility 2 (Vi·ªán Huy·∫øt h·ªçc): 3 packages`);
  console.log(`     - G√≥i TƒÉng NƒÉng L∆∞·ª£ng: 35 packages`);
  console.log(`     - G√≥i Xanh Th√¢n Thi·ªán: 20 packages`);
  console.log(`     - G√≥i Kh·ªüi ƒê·∫ßu T·ªët: 60 packages`);
  
  return createdGiftPackages;
}

async function createGiftBudgets(facilities) {
  const currentYear = new Date().getFullYear();
  const startDate = new Date(currentYear, 0, 1); // January 1st
  const endDate = new Date(currentYear, 11, 31); // December 31st

  const giftBudgets = [
    {
      facilityId: facilities[0]._id, // Ch·ª£ R·∫´y
      budget: 50000000, // 50 million VND
      spent: 5000000,   // 5 million VND spent
      startDate,
      endDate
    },
    {
      facilityId: facilities[1]._id, // Vi·ªán Huy·∫øt h·ªçc
      budget: 30000000, // 30 million VND  
      spent: 3000000,   // 3 million VND spent
      startDate,
      endDate
    }
  ];

  const createdGiftBudgets = await GiftBudget.insertMany(giftBudgets);
  console.log(`‚úÖ Created ${createdGiftBudgets.length} gift budgets`);
  return createdGiftBudgets;
}

async function createGiftInventories(giftItems, facilities) {
  const giftInventories = [];

  // Create inventory for both facilities
  for (const facility of facilities) {
    for (const giftItem of giftItems) {
      // Different stock levels for different facilities
      const isMainFacility = facility.code === 'CR_BLOOD_001'; // Ch·ª£ R·∫´y
      const baseQuantity = isMainFacility ? 200 : 150;
      
      // Vary quantities based on item category
      let quantity = baseQuantity;
      let minStockLevel = 20;
      
      switch (giftItem.category) {
        case GIFT_ITEM_CATEGORY.HEALTH:
          quantity = baseQuantity + 50;
          minStockLevel = 30;
          break;
        case GIFT_ITEM_CATEGORY.BEVERAGE:
          quantity = baseQuantity + 100;
          minStockLevel = 40;
          break;
        case GIFT_ITEM_CATEGORY.FOOD:
          quantity = baseQuantity + 75;
          minStockLevel = 25;
          break;
        case GIFT_ITEM_CATEGORY.MERCHANDISE:
          quantity = Math.floor(baseQuantity / 2);
          minStockLevel = 15;
          break;
        case GIFT_ITEM_CATEGORY.OTHER:
          quantity = baseQuantity + 25;
          minStockLevel = 20;
          break;
      }

      giftInventories.push({
        facilityId: facility._id,
        giftItemId: giftItem._id,
        quantity,
        reservedQuantity: Math.floor(Math.random() * 10), // Random reserved 0-9
        costPerUnit: giftItem.costPerUnit,
        minStockLevel,
        lastStockDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000) // Random date within last 30 days
      });
    }
  }

  const createdGiftInventories = await GiftInventory.insertMany(giftInventories);
  console.log(`‚úÖ Created ${createdGiftInventories.length} gift inventory records`);
  return createdGiftInventories;
}

async function createGiftLogs(giftItems, giftPackages, facilities, facilityStaff) {
  const giftLogs = [];
  
  // Get manager staff for logging
  const managers = facilityStaff.filter(staff => staff.position === STAFF_POSITION.MANAGER);
  
  // Create some sample logs for the past week
  const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
  
  // Stock in logs
  for (let i = 0; i < 10; i++) {
    const randomGiftItem = giftItems[Math.floor(Math.random() * giftItems.length)];
    const randomFacility = facilities[Math.floor(Math.random() * facilities.length)];
    const randomManager = managers.find(m => m.facilityId.toString() === randomFacility._id.toString());
    
    if (randomManager) {
      giftLogs.push({
        facilityId: randomFacility._id,
        giftItemId: randomGiftItem._id,
        action: GIFT_ACTION.STOCK_IN,
        userId: randomManager._id,
        details: {
          name: randomGiftItem.name,
          quantity: Math.floor(Math.random() * 100) + 50,
          costPerUnit: randomGiftItem.costPerUnit,
          totalCost: (Math.floor(Math.random() * 100) + 50) * randomGiftItem.costPerUnit
        },
        timestamp: new Date(oneWeekAgo.getTime() + Math.random() * 7 * 24 * 60 * 60 * 1000)
      });
    }
  }

  // Package creation logs
  for (const giftPackage of giftPackages) {
    const facilityManager = managers.find(m => m._id.toString() === giftPackage.createdBy.toString());
    if (facilityManager) {
      giftLogs.push({
        facilityId: facilityManager.facilityId,
        packageId: giftPackage._id,
        action: GIFT_ACTION.CREATE_PACKAGE,
        userId: facilityManager._id,
        details: {
          name: giftPackage.name,
          quantity: giftPackage.quantity,
          itemCount: giftPackage.items.length,
          items: giftPackage.items.map(item => ({
            giftItemId: item.giftItemId,
            quantity: item.quantity
          }))
        },
        timestamp: new Date(oneWeekAgo.getTime() + Math.random() * 7 * 24 * 60 * 60 * 1000)
      });
    }
  }

  // Budget update logs
  for (const facility of facilities) {
    const facilityManager = managers.find(m => m.facilityId.toString() === facility._id.toString());
    if (facilityManager) {
      giftLogs.push({
        facilityId: facility._id,
        action: GIFT_ACTION.UPDATE_BUDGET,
        userId: facilityManager._id,
        details: {
          budget: facility.code === 'CR_BLOOD_001' ? 50000000 : 30000000,
          startDate: new Date(new Date().getFullYear(), 0, 1),
          endDate: new Date(new Date().getFullYear(), 11, 31)
        },
        timestamp: new Date(oneWeekAgo.getTime() + Math.random() * 24 * 60 * 60 * 1000)
      });
    }
  }

  const createdGiftLogs = await GiftLog.insertMany(giftLogs);
  console.log(`‚úÖ Created ${createdGiftLogs.length} gift log entries`);
  return createdGiftLogs;
}

async function createCompletedBloodDonations(users, facilities, bloodGroups, facilityStaff) {
  const donors = users.filter(user => user.role === USER_ROLE.MEMBER);
  const nurses = facilityStaff.filter(staff => staff.position === STAFF_POSITION.NURSE);
  
  const createdDonations = [];
  
  // Create completed donations for the first 6 donors (we'll use these for gift distributions)
  for (let i = 0; i < 6; i++) {
    const donor = donors[i];
    const facility = facilities[i % 2]; // Alternate between facilities
    const nurse = nurses.find(n => n.facilityId.toString() === facility._id.toString());
    
    if (donor && nurse) {
      // Create donation from 2-7 days ago (completed)
      const donationDate = new Date(Date.now() - (2 + i) * 24 * 60 * 60 * 1000);
      
      try {
        const donation = new BloodDonation({
          userId: donor._id,
          bloodGroupId: donor.bloodId,
          quantity: 450, // Standard donation amount
          donationDate,
          status: BLOOD_DONATION_STATUS.COMPLETED,
          bloodDonationRegistrationId: null, // Can be null for walk-in donations
          createdBy: nurse._id,
          staffId: nurse._id,
          notes: `Completed blood donation from ${donor.fullName} - ${donationDate.toDateString()}`
        });
        
        const savedDonation = await donation.save(); // This will trigger pre-save middleware to generate unique code
        createdDonations.push(savedDonation);
        console.log(`  ‚úÖ Created donation ${i + 1}/6: ${savedDonation.code} for ${donor.fullName}`);
      } catch (error) {
        console.error(`  ‚ùå Error creating donation ${i + 1}:`, error.message);
        throw error;
      }
    }
  }
  
  console.log(`‚úÖ Created ${createdDonations.length} completed blood donations for gift distribution testing`);
  return createdDonations;
}

async function createSampleGiftDistributions(giftPackages, giftItems, users, facilityStaff, facilities, bloodDonations) {
  const giftDistributions = [];
  
  // Get donor users and nurse staff
  const donors = users.filter(user => user.role === USER_ROLE.MEMBER);
  const nurses = facilityStaff.filter(staff => staff.position === STAFF_POSITION.NURSE);
  
  // Create some sample distributions from the past week
  const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
  
  // Distribute some packages (only 3 to preserve quantities for testing)
  const packagesToDistribute = [
    { packageIndex: 0, donationIndex: 0, facilityIndex: 0 }, // G√≥i C·∫£m ∆†n C∆° B·∫£n
    { packageIndex: 2, donationIndex: 1, facilityIndex: 0 }, // G√≥i An To√†n S·ª©c Kh·ªèe
    { packageIndex: 4, donationIndex: 2, facilityIndex: 1 }, // G√≥i TƒÉng NƒÉng L∆∞·ª£ng
  ];
  
  for (const distConfig of packagesToDistribute) {
    const giftPackage = giftPackages[distConfig.packageIndex];
    const bloodDonation = bloodDonations[distConfig.donationIndex];
    const facility = facilities[distConfig.facilityIndex];
    const nurse = nurses.find(n => n.facilityId.toString() === facility._id.toString());
    
    if (giftPackage && bloodDonation && nurse) {
      // Create distribution records for each item in the package
      for (const packageItem of giftPackage.items) {
        giftDistributions.push({
          facilityId: facility._id,
          giftItemId: packageItem.giftItemId,
          userId: bloodDonation.userId,
          donationId: bloodDonation._id, // Use real donation ID
          packageId: giftPackage._id,
          quantity: packageItem.quantity,
          costPerUnit: giftItems.find(item => item._id.toString() === packageItem.giftItemId.toString())?.costPerUnit || 0,
          distributedBy: nurse._id,
          distributedAt: new Date(oneWeekAgo.getTime() + Math.random() * 7 * 24 * 60 * 60 * 1000),
          notes: `Ph√¢n ph√°t g√≥i qu√† "${giftPackage.name}" cho donation ID: ${bloodDonation._id}`
        });
      }
    }
  }
  
  // Create some individual gift distributions
  const individualDistributions = [
    { giftItemName: 'Coconut Water', donationIndex: 3, facilityIndex: 1, quantity: 1 },
    { giftItemName: 'Vitamin C Tablets', donationIndex: 4, facilityIndex: 0, quantity: 1 },
    { giftItemName: 'Thank You Card', donationIndex: 5, facilityIndex: 1, quantity: 1 },
  ];
  
  for (const distConfig of individualDistributions) {
    const giftItem = giftItems.find(item => item.name === distConfig.giftItemName);
    const bloodDonation = bloodDonations[distConfig.donationIndex];
    const facility = facilities[distConfig.facilityIndex];
    const nurse = nurses.find(n => n.facilityId.toString() === facility._id.toString());
    
    if (giftItem && bloodDonation && nurse) {
      giftDistributions.push({
        facilityId: facility._id,
        giftItemId: giftItem._id,
        userId: bloodDonation.userId,
        donationId: bloodDonation._id, // Use real donation ID
        packageId: null, // Individual distribution
        quantity: distConfig.quantity,
        costPerUnit: giftItem.costPerUnit,
        distributedBy: nurse._id,
        distributedAt: new Date(oneWeekAgo.getTime() + Math.random() * 7 * 24 * 60 * 60 * 1000),
        notes: `Ph√¢n ph√°t ƒë∆°n l·∫ª ${giftItem.name} cho donation ID: ${bloodDonation._id}`
      });
    }
  }
  
  if (giftDistributions.length > 0) {
    const createdDistributions = await GiftDistribution.insertMany(giftDistributions);
    console.log(`‚úÖ Created ${createdDistributions.length} sample gift distributions`);
    console.log(`   üì¶ Package distributions: ${packagesToDistribute.length} packages`);
    console.log(`   üéÅ Individual distributions: ${individualDistributions.length} items`);
    return createdDistributions;
  }
  
  return [];
}

async function createHealthChecks(registrations, facilityStaff) {
  const healthChecks = [];
  const doctors = facilityStaff.filter(staff => staff.position === STAFF_POSITION.DOCTOR);
  const nurses = facilityStaff.filter(staff => staff.position === STAFF_POSITION.NURSE);
  
  // Create health checks for registrations that are checked_in or beyond
  const eligibleRegistrations = registrations.filter(reg => 
    [BLOOD_DONATION_REGISTRATION_STATUS.CHECKED_IN, 
     BLOOD_DONATION_REGISTRATION_STATUS.IN_CONSULT,
     BLOOD_DONATION_REGISTRATION_STATUS.WAITING_DONATION,
     BLOOD_DONATION_REGISTRATION_STATUS.DONATING,
     BLOOD_DONATION_REGISTRATION_STATUS.DONATED,
     BLOOD_DONATION_REGISTRATION_STATUS.RESTING,
     BLOOD_DONATION_REGISTRATION_STATUS.POST_REST_CHECK,
     BLOOD_DONATION_REGISTRATION_STATUS.COMPLETED].includes(reg.status)
  );
  
  for (const registration of eligibleRegistrations) {
    const doctor = doctors.find(d => d.facilityId.toString() === registration.facilityId.toString());
    const nurse = nurses.find(n => n.facilityId.toString() === registration.facilityId.toString());
    
    if (doctor && nurse) {
      // Use createdAt instead of registrationDate
      const baseDate = registration.createdAt || new Date();
      
      // Determine eligibility based on random factors (90% eligible)
      const isEligible = Math.random() > 0.1;
      
      // Generate realistic health metrics
      const healthCheck = {
        registrationId: registration._id,
        userId: registration.userId,
        doctorId: doctor._id,
        staffId: nurse._id,
        facilityId: registration.facilityId,
        checkDate: new Date(baseDate.getTime() + Math.random() * 2 * 60 * 60 * 1000), // Within 2 hours of registration
        isEligible,
        bloodPressure: isEligible ? 
          `${110 + Math.floor(Math.random() * 20)}/${70 + Math.floor(Math.random() * 15)} mmHg` : 
          `${150 + Math.floor(Math.random() * 20)}/${95 + Math.floor(Math.random() * 15)} mmHg`,
        hemoglobin: isEligible ? 
          12.5 + Math.random() * 3 : // 12.5-15.5 g/dL for eligible
          10 + Math.random() * 2, // 10-12 g/dL for ineligible
        weight: 50 + Math.random() * 40, // 50-90 kg
        pulse: isEligible ? 
          60 + Math.floor(Math.random() * 20) : // 60-80 bpm for eligible
          90 + Math.floor(Math.random() * 30), // 90-120 bpm for ineligible
        temperature: 36.2 + Math.random() * 0.6, // 36.2-36.8¬∞C
        generalCondition: isEligible ? 
          ['Good', 'Excellent', 'Stable'][Math.floor(Math.random() * 3)] :
          ['Fatigued', 'Weak', 'Stressed'][Math.floor(Math.random() * 3)],
        deferralReason: isEligible ? null : 
          ['Low hemoglobin', 'High blood pressure', 'Recent illness', 'Insufficient weight'][Math.floor(Math.random() * 4)],
        notes: isEligible ? 
          'Donor meets all health requirements for blood donation' :
          'Donor deferred due to health concerns. Advised to return after addressing issues.',
        status: HEALTH_CHECK_STATUS.COMPLETED
      };
      
      healthChecks.push(healthCheck);
    }
  }
  
  if (healthChecks.length > 0) {
    const createdHealthChecks = await HealthCheck.insertMany(healthChecks);
    console.log(`‚úÖ Created ${createdHealthChecks.length} health check records`);
    console.log(`   ‚úÖ Eligible: ${createdHealthChecks.filter(hc => hc.isEligible).length}`);
    console.log(`   ‚ùå Deferred: ${createdHealthChecks.filter(hc => !hc.isEligible).length}`);
    return createdHealthChecks;
  }
  
  return [];
}

async function createProcessDonationLogs(registrations, facilityStaff) {
  const processDonationLogs = [];
  const allStaff = facilityStaff;
  
  // Create logs for each status transition in registrations
  for (const registration of registrations) {
    const staff = allStaff.find(s => s.facilityId.toString() === registration.facilityId.toString());
    
    if (staff) {
      // Use createdAt instead of registrationDate
      const baseDate = registration.createdAt || new Date();
      
      // Create initial log for registration creation
      processDonationLogs.push({
        registrationId: registration._id,
        status: BLOOD_DONATION_REGISTRATION_STATUS.PENDING_APPROVAL,
        changedBy: staff._id,
        notes: 'ƒêƒÉng k√Ω hi·∫øn m√°u ƒë∆∞·ª£c t·∫°o',
        changedAt: baseDate
      });
      
      // Create log for approval (if approved)
      if (registration.status !== BLOOD_DONATION_REGISTRATION_STATUS.PENDING_APPROVAL) {
        processDonationLogs.push({
          registrationId: registration._id,
          status: BLOOD_DONATION_REGISTRATION_STATUS.REGISTERED,
          changedBy: registration.approvedBy || staff._id,
          notes: 'ƒêƒÉng k√Ω ƒë∆∞·ª£c ph√™ duy·ªát b·ªüi nh√¢n vi√™n',
          changedAt: new Date(baseDate.getTime() + 30 * 60 * 1000) // 30 minutes later
        });
      }
      
      // Create logs for advanced statuses
      if ([BLOOD_DONATION_REGISTRATION_STATUS.CHECKED_IN, 
           BLOOD_DONATION_REGISTRATION_STATUS.IN_CONSULT,
           BLOOD_DONATION_REGISTRATION_STATUS.WAITING_DONATION,
           BLOOD_DONATION_REGISTRATION_STATUS.DONATING,
           BLOOD_DONATION_REGISTRATION_STATUS.DONATED,
           BLOOD_DONATION_REGISTRATION_STATUS.RESTING,
           BLOOD_DONATION_REGISTRATION_STATUS.POST_REST_CHECK,
           BLOOD_DONATION_REGISTRATION_STATUS.COMPLETED].includes(registration.status)) {
        
        // Check-in log
        processDonationLogs.push({
          registrationId: registration._id,
          status: BLOOD_DONATION_REGISTRATION_STATUS.CHECKED_IN,
          changedBy: staff._id,
          notes: 'Ng∆∞·ªùi hi·∫øn m√°u ƒë√£ check-in t·∫°i c∆° s·ªü',
          changedAt: new Date(baseDate.getTime() + 60 * 60 * 1000) // 1 hour later
        });
        
        // In consultation log
        if (registration.status !== BLOOD_DONATION_REGISTRATION_STATUS.CHECKED_IN) {
          processDonationLogs.push({
            registrationId: registration._id,
            status: BLOOD_DONATION_REGISTRATION_STATUS.IN_CONSULT,
            changedBy: staff._id,
            notes: 'B·∫Øt ƒë·∫ßu t∆∞ v·∫•n v√† ki·ªÉm tra s·ª©c kh·ªèe',
            changedAt: new Date(baseDate.getTime() + 90 * 60 * 1000) // 1.5 hours later
          });
        }
        
        // Waiting donation log (if eligible)
        if ([BLOOD_DONATION_REGISTRATION_STATUS.WAITING_DONATION,
             BLOOD_DONATION_REGISTRATION_STATUS.DONATING,
             BLOOD_DONATION_REGISTRATION_STATUS.DONATED,
             BLOOD_DONATION_REGISTRATION_STATUS.RESTING,
             BLOOD_DONATION_REGISTRATION_STATUS.POST_REST_CHECK,
             BLOOD_DONATION_REGISTRATION_STATUS.COMPLETED].includes(registration.status)) {
          
          processDonationLogs.push({
            registrationId: registration._id,
            status: BLOOD_DONATION_REGISTRATION_STATUS.WAITING_DONATION,
            changedBy: staff._id,
            notes: 'ƒê·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u, ch·ªù ƒë·∫øn l∆∞·ª£t',
            changedAt: new Date(baseDate.getTime() + 120 * 60 * 1000) // 2 hours later
          });
          
          // Donating log
          if (registration.status !== BLOOD_DONATION_REGISTRATION_STATUS.WAITING_DONATION) {
            processDonationLogs.push({
              registrationId: registration._id,
              status: BLOOD_DONATION_REGISTRATION_STATUS.DONATING,
              changedBy: staff._id,
              notes: 'B·∫Øt ƒë·∫ßu qu√° tr√¨nh hi·∫øn m√°u',
              changedAt: new Date(baseDate.getTime() + 150 * 60 * 1000) // 2.5 hours later
            });
          }
          
          // Donated log
          if ([BLOOD_DONATION_REGISTRATION_STATUS.DONATED,
               BLOOD_DONATION_REGISTRATION_STATUS.RESTING,
               BLOOD_DONATION_REGISTRATION_STATUS.POST_REST_CHECK,
               BLOOD_DONATION_REGISTRATION_STATUS.COMPLETED].includes(registration.status)) {
            
            processDonationLogs.push({
              registrationId: registration._id,
              status: BLOOD_DONATION_REGISTRATION_STATUS.DONATED,
              changedBy: staff._id,
              notes: 'Ho√†n th√†nh hi·∫øn m√°u th√†nh c√¥ng',
              changedAt: new Date(baseDate.getTime() + 180 * 60 * 1000) // 3 hours later
            });
          }
          
          // Resting log
          if ([BLOOD_DONATION_REGISTRATION_STATUS.RESTING,
               BLOOD_DONATION_REGISTRATION_STATUS.POST_REST_CHECK,
               BLOOD_DONATION_REGISTRATION_STATUS.COMPLETED].includes(registration.status)) {
            
            processDonationLogs.push({
              registrationId: registration._id,
              status: BLOOD_DONATION_REGISTRATION_STATUS.RESTING,
              changedBy: staff._id,
              notes: 'Ng∆∞·ªùi hi·∫øn m√°u ƒëang ngh·ªâ ng∆°i',
              changedAt: new Date(baseDate.getTime() + 190 * 60 * 1000) // 3.17 hours later
            });
          }
          
          // Post rest check log
          if ([BLOOD_DONATION_REGISTRATION_STATUS.POST_REST_CHECK,
               BLOOD_DONATION_REGISTRATION_STATUS.COMPLETED].includes(registration.status)) {
            
            processDonationLogs.push({
              registrationId: registration._id,
              status: BLOOD_DONATION_REGISTRATION_STATUS.POST_REST_CHECK,
              changedBy: staff._id,
              notes: 'Ki·ªÉm tra s·ª©c kh·ªèe sau khi ngh·ªâ ng∆°i',
              changedAt: new Date(baseDate.getTime() + 210 * 60 * 1000) // 3.5 hours later
            });
          }
          
          // Completed log
          if (registration.status === BLOOD_DONATION_REGISTRATION_STATUS.COMPLETED) {
            processDonationLogs.push({
              registrationId: registration._id,
              status: BLOOD_DONATION_REGISTRATION_STATUS.COMPLETED,
              changedBy: staff._id,
              notes: 'Ho√†n th√†nh to√†n b·ªô quy tr√¨nh hi·∫øn m√°u',
              changedAt: new Date(baseDate.getTime() + 240 * 60 * 1000) // 4 hours later
            });
          }
        }
      }
    }
  }
  
  if (processDonationLogs.length > 0) {
    // Create logs one by one to trigger pre-save middleware for unique code generation
    const createdLogs = [];
    console.log(`üîÑ Creating ${processDonationLogs.length} process donation logs one by one...`);
    
    for (let i = 0; i < processDonationLogs.length; i++) {
      try {
        const log = await ProcessDonationLog.create(processDonationLogs[i]);
        createdLogs.push(log);
        if ((i + 1) % 10 === 0) {
          console.log(`  ‚úÖ Created ${i + 1}/${processDonationLogs.length} logs`);
        }
      } catch (error) {
        console.error(`  ‚ùå Error creating log ${i + 1}:`, error.message);
        throw error;
      }
    }
    
    console.log(`‚úÖ Created ${createdLogs.length} process donation log entries`);
    return createdLogs;
  }
  
  return [];
}

async function createBloodUnitsFromDonations(bloodDonations, bloodComponents, facilityStaff) {
  const bloodUnits = [];
  const doctors = facilityStaff.filter(staff => staff.position === STAFF_POSITION.DOCTOR);
  
  // Component expiry days mapping
  const componentExpiryDays = {
    [BLOOD_COMPONENT.WHOLE]: 35,
    [BLOOD_COMPONENT.RED_CELLS]: 42,
    [BLOOD_COMPONENT.PLASMA]: 365,
    [BLOOD_COMPONENT.PLATELETS]: 5
  };
  
  for (const donation of bloodDonations) {
    // Get facility from staffId
    const staff = facilityStaff.find(s => s._id.toString() === donation.staffId?.toString());
    const facilityId = staff?.facilityId;
    
    const doctor = doctors.find(d => d.facilityId.toString() === facilityId?.toString());
    
    if (doctor && facilityId && donation.status === BLOOD_DONATION_STATUS.COMPLETED) {
      // Create 2-3 blood units per donation (different components)
      const numUnits = 2 + Math.floor(Math.random() * 2); // 2-3 units
      const selectedComponents = [];
      
      // Always include whole blood
      selectedComponents.push(bloodComponents.find(c => c.name === BLOOD_COMPONENT.WHOLE));
      
      // Randomly add other components
      const otherComponents = bloodComponents.filter(c => c.name !== BLOOD_COMPONENT.WHOLE);
      for (let i = 0; i < numUnits - 1; i++) {
        const randomComponent = otherComponents[Math.floor(Math.random() * otherComponents.length)];
        if (!selectedComponents.find(c => c._id.toString() === randomComponent._id.toString())) {
          selectedComponents.push(randomComponent);
        }
      }
      
      for (const component of selectedComponents) {
        const expiryDays = componentExpiryDays[component.name] || 35;
        const collectedAt = donation.donationDate;
        const expiresAt = new Date(collectedAt.getTime() + expiryDays * 24 * 60 * 60 * 1000);
        
        // Determine quantity based on component type
        let quantity;
        switch (component.name) {
          case BLOOD_COMPONENT.WHOLE:
            quantity = 450; // Standard whole blood unit
            break;
          case BLOOD_COMPONENT.RED_CELLS:
            quantity = 250; // Red cells from whole blood
            break;
          case BLOOD_COMPONENT.PLASMA:
            quantity = 200; // Plasma from whole blood
            break;
          case BLOOD_COMPONENT.PLATELETS:
            quantity = 50; // Platelet concentrate
            break;
          default:
            quantity = 450;
        }
        
        // Determine test results (95% pass all tests)
        const passAllTests = Math.random() > 0.05;
        const testResults = {
          hiv: passAllTests ? TEST_BLOOD_UNIT_RESULT.NEGATIVE : 
               (Math.random() > 0.5 ? TEST_BLOOD_UNIT_RESULT.NEGATIVE : TEST_BLOOD_UNIT_RESULT.POSITIVE),
          hepatitisB: passAllTests ? TEST_BLOOD_UNIT_RESULT.NEGATIVE : 
                     (Math.random() > 0.5 ? TEST_BLOOD_UNIT_RESULT.NEGATIVE : TEST_BLOOD_UNIT_RESULT.POSITIVE),
          hepatitisC: passAllTests ? TEST_BLOOD_UNIT_RESULT.NEGATIVE : 
                     (Math.random() > 0.5 ? TEST_BLOOD_UNIT_RESULT.NEGATIVE : TEST_BLOOD_UNIT_RESULT.POSITIVE),
          syphilis: passAllTests ? TEST_BLOOD_UNIT_RESULT.NEGATIVE : 
                   (Math.random() > 0.5 ? TEST_BLOOD_UNIT_RESULT.NEGATIVE : TEST_BLOOD_UNIT_RESULT.POSITIVE),
          notes: passAllTests ? 'T·∫•t c·∫£ test √¢m t√≠nh, ƒë∆°n v·ªã m√°u an to√†n' : 'Ph√°t hi·ªán b·∫•t th∆∞·ªùng trong test, ƒë∆°n v·ªã m√°u b·ªã t·ª´ ch·ªëi'
        };
        
        // Determine status based on test results
        const allTestsNegative = Object.values(testResults).slice(0, 4).every(result => result === TEST_BLOOD_UNIT_RESULT.NEGATIVE);
        const status = allTestsNegative ? BLOOD_UNIT_STATUS.AVAILABLE : BLOOD_UNIT_STATUS.REJECTED;
        
        const bloodUnit = {
          donationId: donation._id,
          facilityId: facilityId, // Use facilityId from staff
          bloodGroupId: donation.bloodGroupId,
          componentId: component._id,
          quantity,
          remainingQuantity: quantity,
          deliveredQuantity: 0,
          collectedAt,
          expiresAt,
          status,
          testResults,
          processedBy: doctor._id,
          processedAt: new Date(collectedAt.getTime() + (1 + Math.random() * 2) * 24 * 60 * 60 * 1000), // 1-3 days after collection
          approvedBy: allTestsNegative ? doctor._id : null,
          approvedAt: allTestsNegative ? new Date(collectedAt.getTime() + (2 + Math.random() * 2) * 24 * 60 * 60 * 1000) : null // 2-4 days after collection
        };
        
        bloodUnits.push(bloodUnit);
      }
    }
  }
  
  if (bloodUnits.length > 0) {
    // Create blood units one by one to trigger pre-save middleware for unique code generation
    const createdBloodUnits = [];
    console.log(`üîÑ Creating ${bloodUnits.length} blood units one by one...`);
    
    for (let i = 0; i < bloodUnits.length; i++) {
      try {
        const bloodUnit = await BloodUnit.create(bloodUnits[i]);
        createdBloodUnits.push(bloodUnit);
        if ((i + 1) % 5 === 0) {
          console.log(`  ‚úÖ Created ${i + 1}/${bloodUnits.length} blood units`);
        }
      } catch (error) {
        console.error(`  ‚ùå Error creating blood unit ${i + 1}:`, error.message);
        throw error;
      }
    }
    
    console.log(`‚úÖ Created ${createdBloodUnits.length} blood units from ${bloodDonations.length} donations`);
    console.log(`   ‚úÖ Available: ${createdBloodUnits.filter(bu => bu.status === BLOOD_UNIT_STATUS.AVAILABLE).length}`);
    console.log(`   ‚ùå Rejected: ${createdBloodUnits.filter(bu => bu.status === BLOOD_UNIT_STATUS.REJECTED).length}`);
    console.log(`   üß™ Testing: ${createdBloodUnits.filter(bu => bu.status === BLOOD_UNIT_STATUS.TESTING).length}`);
    return createdBloodUnits;
  }
  
  return [];
}

async function createBloodInventoryFromUnits(bloodUnits, facilities, bloodGroups, bloodComponents) {
  const inventoryMap = new Map();
  
  // Group blood units by facility, blood group, and component
  for (const unit of bloodUnits) {
    if (unit.status === BLOOD_UNIT_STATUS.AVAILABLE) {
      const key = `${unit.facilityId}_${unit.bloodGroupId}_${unit.componentId}`;
      
      if (!inventoryMap.has(key)) {
        inventoryMap.set(key, {
          facilityId: unit.facilityId,
          groupId: unit.bloodGroupId, // Changed from bloodGroupId to groupId
          componentId: unit.componentId,
          totalQuantity: 0
        });
      }
      
      const inventory = inventoryMap.get(key);
      inventory.totalQuantity += unit.remainingQuantity;
    }
  }
  
  // Create inventory records one by one to trigger pre-save middleware
  const createdInventory = [];
  console.log(`üîÑ Creating ${inventoryMap.size} blood inventory records one by one...`);
  
  let index = 0;
  for (const [key, data] of inventoryMap) {
    const bloodGroup = bloodGroups.find(bg => bg._id.toString() === data.groupId.toString());
    const component = bloodComponents.find(bc => bc._id.toString() === data.componentId.toString());
    
    try {
      const inventoryRecord = await BloodInventory.create({
        facilityId: data.facilityId,
        groupId: data.groupId, // Use groupId as per model schema
        componentId: data.componentId,
        totalQuantity: data.totalQuantity
      });
      
      createdInventory.push(inventoryRecord);
      index++;
      console.log(`  ‚úÖ Created inventory ${index}/${inventoryMap.size}: ${inventoryRecord.code} - ${bloodGroup?.name} ${component?.name}`);
    } catch (error) {
      console.error(`  ‚ùå Error creating inventory record ${index + 1}:`, error.message);
      throw error;
    }
  }
  
  console.log(`‚úÖ Created ${createdInventory.length} blood inventory records`);
  
  // Log inventory summary by facility
  for (const facility of facilities) {
    const facilityInventory = createdInventory.filter(inv => inv.facilityId.toString() === facility._id.toString());
    const totalQuantity = facilityInventory.reduce((sum, inv) => sum + inv.totalQuantity, 0);
    console.log(`   üì¶ ${facility.name}: ${facilityInventory.length} inventory types, ${totalQuantity}ml total`);
  }
  
  return createdInventory;
}

async function createBloodRequests(users, facilities, bloodGroups, bloodComponents, facilityStaff) {
  const bloodRequests = [];
  
  // Get donor users (MEMBER role)
  const donors = users.filter(user => user.role === USER_ROLE.MEMBER);
  const managers = facilityStaff.filter(staff => staff.position === STAFF_POSITION.MANAGER);
  
  console.log(`ü©∏ Creating blood requests for ${facilities.length} facilities...`);
  
  // T·∫°o 14 blood requests (7 cho m·ªói facility, m·ªói status c√≥ 2 requests)
  const statuses = Object.values(BLOOD_REQUEST_STATUS);
  
  let requestIndex = 0;
  
  for (const facility of facilities) {
    const facilityManager = managers.find(m => m.facilityId.toString() === facility._id.toString());
    
    console.log(`üè• Creating requests for ${facility.name}...`);
    
    // T·∫°o 2 requests cho m·ªói status (7 statuses = 14 requests per facility)
    for (let statusIndex = 0; statusIndex < statuses.length; statusIndex++) {
      const status = statuses[statusIndex];
      
      // T·∫°o 2 requests cho status n√†y
      for (let i = 0; i < 2; i++) {
        const donor = donors[requestIndex % donors.length];
        const bloodGroup = bloodGroups[requestIndex % bloodGroups.length];
        const component = bloodComponents[requestIndex % bloodComponents.length];
        
        // T·∫°o ng√†y y√™u c·∫ßu trong kho·∫£ng 1-30 ng√†y t·ªõi
        const preferredDate = new Date();
        preferredDate.setDate(preferredDate.getDate() + Math.floor(Math.random() * 30) + 1);
        
        // T·∫°o ƒë·ªãa ch·ªâ v√† t·ªça ƒë·ªô gi·∫£
        const addresses = [
          { address: '123 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP.HCM', coordinates: [106.6583, 10.7554] },
          { address: '456 L√™ ƒê·∫°i H√†nh, Qu·∫≠n 11, TP.HCM', coordinates: [106.6544, 10.7614] },
          { address: '789 V√µ VƒÉn T·∫ßn, Qu·∫≠n 3, TP.HCM', coordinates: [106.6917, 10.7769] },
          { address: '321 Pasteur, Qu·∫≠n 1, TP.HCM', coordinates: [106.6958, 10.7769] },
          { address: '654 ƒêi·ªán Bi√™n Ph·ªß, Qu·∫≠n 10, TP.HCM', coordinates: [106.6667, 10.7667] }
        ];
        const addressInfo = addresses[requestIndex % addresses.length];
        
        const bloodRequest = {
          groupId: bloodGroup._id,
          userId: donor._id,
          facilityId: facility._id,
          componentId: component._id,
          quantity: 350 + Math.floor(Math.random() * 100), // 350-450ml
          isUrgent: Math.random() > 0.7, // 30% urgent
          status: status,
          patientName: donor.fullName,
          patientPhone: donor.phone,
          address: addressInfo.address,
          location: {
            type: 'Point',
            coordinates: addressInfo.coordinates
          },
          medicalDocumentUrl: [
            'https://res.cloudinary.com/bloodhouse/image/upload/v1/medical-docs/sample1.pdf',
            'https://res.cloudinary.com/bloodhouse/image/upload/v1/medical-docs/sample2.pdf'
          ],
          reason: [
            'Ph·∫´u thu·∫≠t tim m·∫°ch kh·∫©n c·∫•p',
            'ƒêi·ªÅu tr·ªã ung th∆∞ m√°u',
            'Tai n·∫°n giao th√¥ng nghi√™m tr·ªçng',
            'Ph·∫´u thu·∫≠t gh√©p t·∫°ng',
            'ƒêi·ªÅu tr·ªã b·ªánh tan m√°u',
            'Ph·∫´u thu·∫≠t s·∫£n khoa',
            'ƒêi·ªÅu tr·ªã xu·∫•t huy·∫øt ti√™u h√≥a'
          ][requestIndex % 7],
          note: `Ghi ch√∫ cho y√™u c·∫ßu m√°u ${requestIndex + 1} - ${status}`,
          preferredDate: preferredDate,
          needsSupport: status === BLOOD_REQUEST_STATUS.APPROVED && Math.random() > 0.5,
          isFulfilled: [BLOOD_REQUEST_STATUS.COMPLETED, BLOOD_REQUEST_STATUS.ASSIGNED].includes(status)
        };
        
        // Th√™m th√¥ng tin ph√™ duy·ªát n·∫øu status kh√¥ng ph·∫£i pending
        if (status !== BLOOD_REQUEST_STATUS.PENDING_APPROVAL && facilityManager) {
          bloodRequest.approvedBy = facilityManager._id;
          bloodRequest.approvedAt = new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000); // 0-7 ng√†y tr∆∞·ªõc
        }
        
        // Th√™m th√¥ng tin ph√¢n ph·ªëi n·∫øu status l√† assigned ho·∫∑c completed
        if ([BLOOD_REQUEST_STATUS.ASSIGNED, BLOOD_REQUEST_STATUS.COMPLETED].includes(status) && facilityManager) {
          bloodRequest.distributedBy = facilityManager._id;
          bloodRequest.distributedAt = new Date(Date.now() - Math.random() * 3 * 24 * 60 * 60 * 1000); // 0-3 ng√†y tr∆∞·ªõc
          bloodRequest.scheduledDeliveryDate = new Date(Date.now() + Math.random() * 2 * 24 * 60 * 60 * 1000); // 0-2 ng√†y t·ªõi
        }
        
        bloodRequests.push(bloodRequest);
        requestIndex++;
      }
    }
  }
  
  // T·∫°o blood requests m·ªôt c√°ch tu·∫ßn t·ª± ƒë·ªÉ tr√°nh l·ªói
  const createdBloodRequests = [];
  console.log(`üîÑ Creating ${bloodRequests.length} blood requests one by one...`);
  
  for (let i = 0; i < bloodRequests.length; i++) {
    try {
      const bloodRequest = await BloodRequest.create(bloodRequests[i]);
      createdBloodRequests.push(bloodRequest);
      console.log(`  ‚úÖ Created blood request ${i + 1}/${bloodRequests.length}: ${bloodRequest._id} - ${bloodRequest.status}`);
    } catch (error) {
      console.error(`  ‚ùå Error creating blood request ${i + 1}:`, error.message);
      throw error;
    }
  }
  
  console.log(`‚úÖ Created ${createdBloodRequests.length} blood requests`);
  console.log(`   üìä Status distribution:`);
  
  // Log distribution by status
  const statusCounts = {};
  createdBloodRequests.forEach(req => {
    statusCounts[req.status] = (statusCounts[req.status] || 0) + 1;
  });
  
  Object.keys(statusCounts).forEach(status => {
    console.log(`     - ${status}: ${statusCounts[status]} requests`);
  });
  
  return createdBloodRequests;
}

async function createBloodRequestSupports(bloodRequests, users) {
  const bloodRequestSupports = [];
  
  // L·∫•y c√°c blood requests c·∫ßn support (approved v√† needsSupport = true)
  const requestsNeedingSupport = bloodRequests.filter(req => 
    req.status === BLOOD_REQUEST_STATUS.APPROVED && req.needsSupport
  );
  
  if (requestsNeedingSupport.length === 0) {
    console.log('üìù No blood requests need support, skipping support creation');
    return [];
  }
  
  // L·∫•y donors c√≥ th·ªÉ support
  const donors = users.filter(user => user.role === USER_ROLE.MEMBER);
  
  console.log(`ü§ù Creating blood request supports for ${requestsNeedingSupport.length} requests...`);
  
  for (const request of requestsNeedingSupport) {
    // T·∫°o 2-5 support requests cho m·ªói blood request
    const numSupports = 2 + Math.floor(Math.random() * 4); // 2-5 supports
    
    for (let i = 0; i < numSupports; i++) {
      const supporter = donors[Math.floor(Math.random() * donors.length)];
      
      // Ki·ªÉm tra xem supporter ƒë√£ support request n√†y ch∆∞a
      const existingSupport = bloodRequestSupports.find(support => 
        support.requestId.toString() === request._id.toString() && 
        support.userId.toString() === supporter._id.toString()
      );
      
      if (!existingSupport) {
        const supportStatus = ['pending', 'approved', 'rejected'][Math.floor(Math.random() * 3)];
        
        const support = {
          requestId: request._id,
          userId: supporter._id,
          phone: supporter.phone,
          email: supporter.email,
          note: `T√¥i s·∫µn s√†ng h·ªó tr·ª£ hi·∫øn m√°u cho y√™u c·∫ßu n√†y. Li√™n h·ªá t√¥i qua s·ªë ${supporter.phone}`,
          status: supportStatus
        };
        
        bloodRequestSupports.push(support);
      }
    }
  }
  
  // T·∫°o blood request supports
  const createdSupports = [];
  console.log(`üîÑ Creating ${bloodRequestSupports.length} blood request supports...`);
  
  for (let i = 0; i < bloodRequestSupports.length; i++) {
    try {
      const support = await BloodRequestSupport.create(bloodRequestSupports[i]);
      createdSupports.push(support);
      if ((i + 1) % 5 === 0) {
        console.log(`  ‚úÖ Created ${i + 1}/${bloodRequestSupports.length} supports`);
      }
    } catch (error) {
      console.error(`  ‚ùå Error creating support ${i + 1}:`, error.message);
      throw error;
    }
  }
  
  console.log(`‚úÖ Created ${createdSupports.length} blood request supports`);
  
  // Log distribution by status
  const statusCounts = {};
  createdSupports.forEach(support => {
    statusCounts[support.status] = (statusCounts[support.status] || 0) + 1;
  });
  
  console.log(`   üìä Support status distribution:`);
  Object.keys(statusCounts).forEach(status => {
    console.log(`     - ${status}: ${statusCounts[status]} supports`);
  });
  
  return createdSupports;
}

async function seedDatabase() {
  try {
    console.log('üå± Starting database seeding...');
    
    await connectDB();
    await clearDatabase();
    
    // Create data in correct order (respecting foreign key dependencies)
    const bloodGroups = await createBloodGroups();
    const bloodComponents = await createBloodComponents();
    const facilities = await createFacilities();
    const users = await createUsers(bloodGroups);
    const facilityStaff = await createFacilityStaff(users, facilities);
    const registrations = await createBloodDonationRegistrations(users, facilities, bloodGroups, facilityStaff);
    
    // Create gift management data
    console.log('\nüéÅ Creating gift management data...');
    const giftItems = await createGiftItems();
    const giftPackages = await createGiftPackages(giftItems, facilityStaff, facilities);
    const giftBudgets = await createGiftBudgets(facilities);
    const giftInventories = await createGiftInventories(giftItems, facilities);
    const giftLogs = await createGiftLogs(giftItems, giftPackages, facilities, facilityStaff);
    const bloodDonations = await createCompletedBloodDonations(users, facilities, bloodGroups, facilityStaff);
    const giftDistributions = await createSampleGiftDistributions(giftPackages, giftItems, users, facilityStaff, facilities, bloodDonations);
    
    // Create health checks
    const healthChecks = await createHealthChecks(registrations, facilityStaff);
    
    // Create process donation logs
    const processDonationLogs = await createProcessDonationLogs(registrations, facilityStaff);
    
    // Create blood units from donations
    const bloodUnits = await createBloodUnitsFromDonations(bloodDonations, bloodComponents, facilityStaff);
    
    // Create blood inventory from units
    const bloodInventory = await createBloodInventoryFromUnits(bloodUnits, facilities, bloodGroups, bloodComponents);
    
    // Create blood requests
    const bloodRequests = await createBloodRequests(users, facilities, bloodGroups, bloodComponents, facilityStaff);
    
    // Create blood request supports
    const bloodRequestSupports = await createBloodRequestSupports(bloodRequests, users);
    
    console.log('\nüéâ Database seeding completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`- Blood Groups: ${bloodGroups.length}`);
    console.log(`- Blood Components: ${bloodComponents.length}`);
    console.log(`- Facilities: ${facilities.length} (Ch·ª£ R·∫´y & Vi·ªán Huy·∫øt h·ªçc TP.HCM)`);
    console.log(`- Users: ${users.length}`);
    console.log(`  - Admins: ${users.filter(u => u.role === USER_ROLE.ADMIN).length}`);
    console.log(`  - Managers: ${users.filter(u => u.role === USER_ROLE.MANAGER).length}`);
    console.log(`  - Doctors: ${users.filter(u => u.role === USER_ROLE.DOCTOR).length}`);
    console.log(`  - Nurses: ${users.filter(u => u.role === USER_ROLE.NURSE).length}`);
    console.log(`  - Donors: ${users.filter(u => u.role === USER_ROLE.MEMBER).length}`);
    console.log(`- Facility Staff: ${facilityStaff.length}`);
    console.log(`- Blood Donation Registrations: ${registrations.length} (Focused on Ch·ª£ R·∫´y)`);
    console.log(`- Completed Blood Donations: ${bloodDonations.length} (For gift distribution testing)`);
    
    // Blood donation workflow data
    console.log('\nü©∏ Blood Donation Workflow Data:');
    console.log(`- Health Checks: ${healthChecks.length} (90% eligible, 10% deferred)`);
    console.log(`- Process Donation Logs: ${processDonationLogs.length} (Complete audit trail)`);
    console.log(`- Blood Units: ${bloodUnits.length} (From completed donations)`);
    console.log(`  - Available: ${bloodUnits.filter(bu => bu.status === BLOOD_UNIT_STATUS.AVAILABLE).length}`);
    console.log(`  - Rejected: ${bloodUnits.filter(bu => bu.status === BLOOD_UNIT_STATUS.REJECTED).length}`);
    console.log(`  - Testing: ${bloodUnits.filter(bu => bu.status === BLOOD_UNIT_STATUS.TESTING).length}`);
    console.log(`- Blood Inventory Records: ${bloodInventory.length} (Grouped by facility/blood group/component)`);
    
    // Blood request summary
    console.log('\nü©∏ Blood Request System Data:');
    console.log(`- Blood Requests: ${bloodRequests.length} (${bloodRequests.length/2} per facility, 2 per status)`);
    console.log(`- Blood Request Supports: ${bloodRequestSupports.length} (For approved requests needing support)`);
    
    // Blood request status distribution
    const requestStatusCounts = {};
    bloodRequests.forEach(req => {
      requestStatusCounts[req.status] = (requestStatusCounts[req.status] || 0) + 1;
    });
    console.log(`   üìä Request status distribution:`);
    Object.keys(requestStatusCounts).forEach(status => {
      console.log(`     - ${status}: ${requestStatusCounts[status]} requests`);
    });
    
    // Support status distribution
    if (bloodRequestSupports.length > 0) {
      const supportStatusCounts = {};
      bloodRequestSupports.forEach(support => {
        supportStatusCounts[support.status] = (supportStatusCounts[support.status] || 0) + 1;
      });
      console.log(`   ü§ù Support status distribution:`);
      Object.keys(supportStatusCounts).forEach(status => {
        console.log(`     - ${status}: ${supportStatusCounts[status]} supports`);
      });
    }
    
    // Gift management summary
    console.log('\nüéÅ Gift Management Data:');
    console.log(`- Gift Items: ${giftItems.length} (5 categories: Health, Food, Beverage, Merchandise, Other)`);
    console.log(`- Gift Packages: ${giftPackages.length} (Curated packages with quantities for different donor types)`);
    console.log(`- Gift Budgets: ${giftBudgets.length} (Annual budgets for both facilities)`);
    console.log(`- Gift Inventories: ${giftInventories.length} (Stock for all items at both facilities)`);
    console.log(`- Gift Distributions: ${giftDistributions.length} (Sample distributions to test the system)`);
    console.log(`- Gift Logs: ${giftLogs.length} (Activity logs for audit trail)`);
    
    console.log('\nüì¶ Package Quantity Summary:');
    console.log('- Total packages across all types: 305 packages');
    console.log('- Facility 1 (Ch·ª£ R·∫´y): 190 packages total');
    console.log('- Facility 2 (Vi·ªán Huy·∫øt h·ªçc): 115 packages total');
    
    console.log('\nüë§ Sample Login Credentials:');
    console.log('Admin: admin1@bloodhouse.vn / password123');
    console.log('Manager (Ch·ª£ R·∫´y): manager1@choray.vn / password123');
    console.log('Manager (Vi·ªán Huy·∫øt h·ªçc HCM): manager2@ihttm-hcm.vn / password123');
    console.log('Doctor: doctor1@choray.vn / password123');
    console.log('Nurse: nurse1@choray.vn / password123');
    console.log('Donor: donor1@gmail.com / password123');
    
    console.log('\nüéÅ Gift System Features Ready:');
    console.log('- Admin can manage gift items system-wide');
    console.log('- Managers can create packages with quantities, manage inventory & budget');
    console.log('- Package quantity tracking: decreases when distributed');
    console.log('- Nurses can distribute gifts to donors with quantity validation');
    console.log('- Full audit trail via gift logs');
    console.log('- Role-based access control implemented');
    
    console.log('\nü©∏ Blood Donation Workflow Features Ready:');
    console.log('- Complete donation registration to blood unit workflow');
    console.log('- Health checks with realistic medical data (BP, hemoglobin, weight, pulse, temperature)');
    console.log('- Process donation logs for complete audit trail');
    console.log('- Blood units with test results (HIV, Hepatitis B/C, Syphilis)');
    console.log('- Automatic blood inventory management');
    console.log('- Component-based blood processing (Whole, Red Cells, Plasma, Platelets)');
    console.log('- Expiry date tracking per component type');
    console.log('- Doctor approval workflow for blood units');
    console.log('- Real-time inventory updates based on blood unit status');
    
    console.log('\nü©∏ Blood Request System Features Ready:');
    console.log('- Complete blood request workflow with 7 status levels');
    console.log('- Support system for community blood donation');
    console.log('- Urgent request prioritization');
    console.log('- Medical document upload and validation');
    console.log('- Geographic location tracking for requests');
    console.log('- Manager approval workflow');
    console.log('- Blood unit assignment and delivery scheduling');
    console.log('- Request fulfillment tracking');
    console.log('- Multi-status support system (pending, approved, rejected)');
    console.log('- Facility-specific request management');
    console.log('- User-specific request history');
    console.log('- Component-specific blood requests');
    
    await verifyData();
    
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üìä Database connection closed');
    process.exit(0);
  }
}

// Run the seeding script
if (require.main === module) {
  seedDatabase();
}

module.exports = { seedDatabase };