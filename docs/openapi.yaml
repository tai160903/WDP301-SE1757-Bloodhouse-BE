openapi: 3.0.3
info:
  title: BloodHouse API
  description: |
    API for BloodHouse - Blood Donation Management System
    
    ## üìö Specialized API Documentation
    
    This is the main API documentation. Click the buttons below to navigate to specialized modules:
    
    ## üìã Module Descriptions
    
    ### üéÅ Gift Management System
    Complete gift management system including items, packages, inventory, budgets, and distributions for blood donors.
    
    ### ü©∏ Blood Donation Registration
    Blood donation registration workflow and management system for scheduling and tracking donor appointments.
    
    ### üíâ Blood Donation Management
    Blood donation process management and tracking from registration to completion.
    
    ### üÜò Blood Request System
    Blood request management for hospitals and patients requiring blood transfusions.
    
    ### üì¶ Blood Inventory Management
    Blood inventory tracking and management system for monitoring stock levels and expiration dates.
    
    ### üë• Facility Staff Management
    Staff management and role-based access control for healthcare facilities.
    
    ### üß™ Blood Unit Management
    Blood unit processing, testing, and approval workflow with quality control measures.
    
    ### üöö Blood Delivery System
    Blood delivery and transportation management for efficient distribution to healthcare facilities.
    
    ## üè• System Overview
    
    BloodHouse is a comprehensive blood donation management system that handles:
    - User registration and authentication
    - Blood donation scheduling and management
    - Blood inventory and distribution
    - Gift management for donors
    - Staff and facility management
    - Blood delivery and transportation
    
    ## üîó Direct Links 
    
    - Main API: [/api-docs](/api-docs)
    - Gift System: [/gift-docs](/gift-docs)
    - Registration: [/blood-donation-registration-docs](/blood-donation-registration-docs)
    - Donations: [/blood-donation-docs](/blood-donation-docs)
    - Requests: [/blood-request-docs](/blood-request-docs)
    - Inventory: [/blood-inventory-docs](/blood-inventory-docs)
    - Staff: [/facility-staff-docs](/facility-staff-docs)
    - Blood Units: [/blood-unit-docs](/blood-unit-docs)
    - Delivery: [/blood-delivery-docs](/blood-delivery-docs)
    - Content: [/content-docs](/content-docs)
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local Development

paths:
  /auth/sign-up:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: Nguyen Van A
                  description: H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß
                email:
                  type: string
                  format: email
                  example: nguyenvana@example.com
                  description: ƒê·ªãa ch·ªâ email
                password:
                  type: string
                  format: password
                  example: Password123!
                  description: M·∫≠t kh·∫©u
                sex:
                  type: string
                  enum: [male, female, other]
                  example: male
                  description: Gi·ªõi t√≠nh
                yob:
                  type: string
                  format: date
                  example: "1990-01-01"
                  description: NƒÉm sinh
                phone:
                  type: string
                  example: "0123456789"
                  description: S·ªë ƒëi·ªán tho·∫°i
                street:
                  type: string
                  example: "123 Le Loi"
                  description: ƒê·ªãa ch·ªâ ƒë∆∞·ªùng
                city:
                  type: string
                  example: "Ho Chi Minh"
                  description: Th√†nh ph·ªë
                country:
                  type: string
                  example: "Vietnam"
                  description: Qu·ªëc gia
                idCard:
                  type: string
                  example: "012345678912"
                  description: S·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n
              required:
                - fullName
                - email
                - password
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109ca"
                      fullName:
                        type: string
                        example: Nguyen Van A
                      email:
                        type: string
                        format: email
                        example: nguyenvana@example.com
                      role:
                        type: string
                        enum: [MEMBER, STAFF, ADMIN]
                        example: MEMBER
                      idCard:
                        type: string
                        example: "012345678912"
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken:
                        type: string
                        example: dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4...
        "400":
          description: Bad request (e.g., email already exists, validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email already exists"
  /auth/sign-in:
    post:
      summary: User login with email or phone
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  example: nguyenvana@example.com
                  description: Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i d√πng ƒë·ªÉ ƒëƒÉng nh·∫≠p
                password:
                  type: string
                  format: password
                  example: Password123!
              required:
                - emailOrPhone
                - password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109ca"
                      fullName:
                        type: string
                        example: Nguyen Van A
                      email:
                        type: string
                        format: email
                        example: nguyenvana@example.com
                      role:
                        type: string
                        enum: [MEMBER, STAFF, ADMIN]
                        example: MEMBER
                      avatar:
                        type: string
                        nullable: true
                        example: "https://example.com/avatar.jpg"
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken:
                        type: string
                        example: dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4...
        "400":
          description: Bad request (e.g., invalid credentials)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or phone does not exist"
  /auth/sign-out:
    post:
      summary: User logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
        "400":
          description: Bad request (e.g., user not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/refresh-token:
    post:
      summary: Refresh access and refresh tokens
      tags:
        - Authentication
      security:
        - bearerAuth: [] # Y√™u c·∫ßu token x√°c th·ª±c (t∆∞∆°ng ·ª©ng v·ªõi middleware checkAuth)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  description: Refresh token ƒë∆∞·ª£c c·∫•p tr∆∞·ªõc ƒë√≥
              required:
                - refreshToken
      responses:
        "200":
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh token successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "60d0fe4f5311236168a109ca"
                          fullName:
                            type: string
                            example: Nguyen Van A
                          email:
                            type: string
                            format: email
                            example: nguyenvana@example.com
                          role:
                            type: string
                            enum: [MEMBER, STAFF, ADMIN]
                            example: MEMBER
                      tokens:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                          refreshToken:
                            type: string
                            example: dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4...
        "400":
          description: Bad request (e.g., invalid or expired refresh token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid refresh token
        "401":
          description: Unauthorized (e.g., missing or invalid access token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
  /user/nearby:
    get:
      summary: Find users near a location
      tags:
        - Users
      parameters:
        - in: query
          name: lat
          schema:
            type: number
            example: 10.776
          required: true
          description: Latitude of the center point
        - in: query
          name: lng
          schema:
            type: number
            example: 106.700
          required: true
          description: Longitude of the center point
        - in: query
          name: distance
          schema:
            type: number
            example: 5
          required: true
          description: Maximum distance in kilometers
        - in: query
          name: bloodType
          schema:
            type: string
            example: A+
          description: Filter by blood type (optional)
      responses:
        "200":
          description: Nearby users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Nearby users retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        fullName:
                          type: string
                        email:
                          type: string
                        phone:
                          type: string
                        bloodId:
                          type: string
                        bloodGroup:
                          type: object
                          properties:
                            type:
                              type: string
                        location:
                          type: object
                          properties:
                            type:
                              type: string
                              example: Point
                            coordinates:
                              type: array
                              items:
                                type: number
                        isAvailable:
                          type: boolean
                        distance:
                          type: number
                          description: Distance in kilometers
        "400":
          description: Bad request (e.g., invalid blood type)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/blood-group:
    patch:
      summary: Update user's blood group
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bloodId:
                  type: string
                  example: 60f7b3a4b9c4e1234567891
              required:
                - bloodId
      responses:
        "200":
          description: Blood group updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blood group updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      bloodId:
                        type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/profile:
    patch:
      summary: Update user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: Nguyen Van B
                phone:
                  type: string
                  example: 0987654321
                street:
                  type: string
                city:
                  type: string
                country:
                  type: string
                lat:
                  type: number
                  example: 10.776
                lng:
                  type: number
                  example: 106.700
                sex:
                  type: string
                  enum: [male, female]
                yob:
                  type: string
                  format: date
                  example: 1990-01-01
                isAvailable:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      street:
                        type: string
                      city:
                        type: string
                      country:
                        type: string
                      location:
                        type: object
                        properties:
                          type:
                            type: string
                          coordinates:
                            type: array
                            items:
                              type: number
                      sex:
                        type: string
                      yob:
                        type: string
                        format: date
                      isAvailable:
                        type: boolean
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/verify-email:
    post:
      summary: Send verification email
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification email sent successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "400":
          description: Bad request (e.g., user already verified)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/verify:
    post:
      summary: Verify user account with OTP
      tags:
        - Users
      security:
        - bearerAuth: [] # Gi·∫£ ƒë·ªãnh c√≥ middleware x√°c th·ª±c user, token bearer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                OTP:
                  type: string
                  example: "123456"
                  description: One-Time Password (OTP) ƒë·ªÉ x√°c minh t√†i kho·∫£n
              required:
                - OTP
      responses:
        "200":
          description: Account verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account verified successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109ca"
                      fullName:
                        type: string
                        example: Nguyen Van A
                      email:
                        type: string
                        format: email
                        example: nguyenvana@example.com
                      isVerified:
                        type: boolean
                        example: true
                      status:
                        type: string
                        example: ACTIVE
        "400":
          description: Bad request (e.g., invalid or expired OTP)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (e.g., missing or invalid access token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/password:
    patch:
      summary: Change user password
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: Password123!
                newPassword:
                  type: string
                  format: password
                  example: NewPass456!
              required:
                - oldPassword
                - newPassword
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "400":
          description: Bad request (e.g., incorrect old password)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/avatar:
    patch:
      summary: Update user avatar
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  example: https://example.com/avatar.jpg
              required:
                - avatar
      responses:
        "200":
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Avatar updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      avatar:
                        type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/me:
    get:
      summary: Get current user info
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User info retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User info retrieved successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      street:
                        type: string
                      city:
                        type: string
                      country:
                        type: string
                      location:
                        type: object
                        properties:
                          type:
                            type: string
                          coordinates:
                            type: array
                            items:
                              type: number
                      sex:
                        type: string
                      yob:
                        type: string
                        format: date
                      bloodId:
                        type: object
                        properties:
                          type:
                            type: string
                      avatar:
                        type: string
                      isAvailable:
                        type: boolean
                      isVerified:
                        type: boolean
                      status:
                        type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user:
    delete:
      summary: Deactivate user account
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account deactivated successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/forgot-password:
    post:
      summary: Request password reset
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: nguyenvana@example.com
              required:
                - email
      responses:
        "200":
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset email sent successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "404":
          description: Email not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/reset-password:
    post:
      summary: Reset user password
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: 6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u
                newPassword:
                  type: string
                  format: password
                  example: NewPass456!
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "400":
          description: Bad request (e.g., invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-group:
    get:
      summary: Get all blood groups
      tags:
        - Blood Group
      responses:
        "200":
          description: Blood groups retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                      example: "A+"
                    note:
                      type: string
                      example: "Most common blood type"
                    characteristics:
                      type: string
                      example: "Contains A antigen on red blood cells"
                    populationRate:
                      type: number
                      example: 35.7
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      summary: Create a new blood group
      tags:
        - Blood Group
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "A+"
                note:
                  type: string
                  example: "Most common blood type"
                characteristics:
                  type: string
                  example: "Contains A antigen on red blood cells"
                populationRate:
                  type: number
                  example: 35.7
              required:
                - name
      responses:
        "201":
          description: Blood group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  note:
                    type: string
                  characteristics:
                    type: string
                  populationRate:
                    type: number
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /blood-group/{id}:
    put:
      summary: Update a blood group
      tags:
        - Blood Group
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Blood group ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "A+"
                note:
                  type: string
                  example: "Most common blood type"
                characteristics:
                  type: string
                  example: "Contains A antigen on red blood cells"
                populationRate:
                  type: number
                  example: 35.7
      responses:
        "200":
          description: Blood group updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  note:
                    type: string
                  characteristics:
                    type: string
                  populationRate:
                    type: number
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Blood group not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /blood-component:
    get:
      summary: Get all blood components
      tags:
        - Blood Component
      responses:
        "200":
          description: Blood components retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                      example: "Plasma"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      summary: Create a new blood component
      tags:
        - Blood Component
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Plasma"
              required:
                - name
      responses:
        "201":
          description: Blood component created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /blood-component/{id}:
    put:
      summary: Update a blood component
      tags:
        - Blood Component
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Blood component ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Plasma"
      responses:
        "200":
          description: Blood component updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Blood component not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /blood-compatibility:
    get:
      summary: Get blood compatibility information
      tags:
        - Blood Compatibility
      parameters:
        - in: query
          name: bloodGroupId
          required: true
          schema:
            type: string
          description: Blood group ID to check compatibility
        - in: query
          name: componentId
          required: true
          schema:
            type: string
          description: Blood component ID to check compatibility
      responses:
        "200":
          description: Blood compatibility information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  canDonateTo:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "AB+"
                  canReceiveFrom:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "O-"
    post:
      summary: Create a new blood compatibility record
      tags:
        - Blood Compatibility
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bloodGroupId:
                  type: string
                  description: ID of the blood group
                componentId:
                  type: string
                  description: ID of the blood component
                canDonateTo:
                  type: array
                  items:
                    type: string
                  description: Array of blood group IDs that can receive this blood
                canReceiveFrom:
                  type: array
                  items:
                    type: string
                  description: Array of blood group IDs that can donate to this blood
              required:
                - bloodGroupId
                - componentId
                - canDonateTo
                - canReceiveFrom
      responses:
        "201":
          description: Blood compatibility created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  bloodGroupId:
                    type: string
                  componentId:
                    type: string
                  canDonateTo:
                    type: array
                    items:
                      type: string
                  canReceiveFrom:
                    type: array
                    items:
                      type: string
  /blood-donation-registration:
    post:
      summary: ƒêƒÉng k√Ω hi·∫øn m√°u
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                facilityId:
                  type: string
                  example: 60f7b3a4b9c4e1234567892
                bloodGroupId:
                  type: string
                  example: 60f7b3a4b9c4e1234567891
                bloodComponent:
                  type: string
                  enum: [M√°u to√†n ph·∫ßn, H·ªìng c·∫ßu, Huy·∫øt t∆∞∆°ng, Ti·ªÉu c·∫ßu]
                preferredDate:
                  type: string
                  format: date-time
                  example: 2025-06-01T10:00:00Z
                source:
                  type: string
                  enum: [T·ª± nguy·ªán, Y√™u c·∫ßu]
                notes:
                  type: string
              required:
                - facilityId
                - bloodGroupId
      responses:
        "201":
          description: ƒêƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ƒêƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng
                  data:
                    $ref: "#/components/schemas/BloodDonationRegistration"
        "400":
          description: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: L·∫•y danh s√°ch ƒëƒÉng k√Ω hi·∫øn m√°u
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, approved, rejected]
        - in: query
          name: facilityId
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: L·∫•y danh s√°ch ƒëƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L·∫•y danh s√°ch ƒëƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonationRegistration"
        "400":
          description: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá
          content:
            application/json:
              schema:

                $ref: '#/components/schemas/ErrorResponse'
  /blood-donation-registration/user:

    get:
      summary: L·∫•y danh s√°ch ƒëƒÉng k√Ω hi·∫øn m√°u c·ªßa ng∆∞·ªùi d√πng
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, approved, rejected]
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: L·∫•y danh s√°ch ƒëƒÉng k√Ω hi·∫øn m√°u c·ªßa ng∆∞·ªùi d√πng th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L·∫•y danh s√°ch ƒëƒÉng k√Ω hi·∫øn m√°u c·ªßa ng∆∞·ªùi d√πng th√†nh c√¥ng
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonationRegistration"
        "400":
          description: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá
          content:
            application/json:
              schema:

                $ref: '#/components/schemas/ErrorResponse'
  /blood-donation-registration/{id}:

    get:
      summary: L·∫•y chi ti·∫øt m·ªôt ƒëƒÉng k√Ω hi·∫øn m√°u
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID ƒëƒÉng k√Ω hi·∫øn m√°u
      responses:
        "200":
          description: L·∫•y chi ti·∫øt ƒëƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L·∫•y chi ti·∫øt ƒëƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng
                  data:
                    $ref: "#/components/schemas/BloodDonationRegistration"
        "404":
          description: Kh√¥ng t√¨m th·∫•y ƒëƒÉng k√Ω
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëƒÉng k√Ω hi·∫øn m√°u (ph√™ duy·ªát ho·∫∑c ghi nh·∫≠n tr·∫°ng th√°i)
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID ƒëƒÉng k√Ω hi·∫øn m√°u c·∫ßn c·∫≠p nh·∫≠t
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Tr·∫°ng th√°i m·ªõi c·ªßa ƒëƒÉng k√Ω hi·∫øn m√°u
                  enum:
                    - approved
                    - rejected
                    - pending
                    - completed
                    - cancelled
                    - no_show
                staffId:
                  type: string
                  description: ID nh√¢n vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng (b·∫Øt bu·ªôc khi status = approved)
                notes:
                  type: string
                  description: Ghi ch√∫ th√™m (tu·ª≥ ch·ªçn)
              required:
                - status
      responses:
        "200":
          description: C·∫≠p nh·∫≠t ƒëƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: C·∫≠p nh·∫≠t ƒëƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng
                  data:
                    $ref: "#/components/schemas/BloodDonationRegistration"
        "400":
          description: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá (v√≠ d·ª• thi·∫øu staffId khi approved ho·∫∑c status kh√¥ng h·ª£p l·ªá)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Kh√¥ng t√¨m th·∫•y ƒëƒÉng k√Ω
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-donation:
    post:
      summary: T·∫°o b·∫£n ghi hi·∫øn m√°u
      tags:
        - Blood Donation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 60f7b3a4b9c4e1234567890
                bloodGroupId:
                  type: string
                  example: 60f7b3a4b9c4e1234567891
                bloodDonationRegistrationId:
                  type: string
                  example: 60f7b3a4b9c4e1234567892
                bloodComponent:
                  type: string
                  enum: [M√°u to√†n ph·∫ßn, H·ªìng c·∫ßu, Huy·∫øt t∆∞∆°ng, Ti·ªÉu c·∫ßu]          
              required:
                - userId
                - bloodGroupId
                - bloodComponent
      responses:
        "201":
          description: T·∫°o b·∫£n ghi hi·∫øn m√°u th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: T·∫°o b·∫£n ghi hi·∫øn m√°u th√†nh c√¥ng
                  data:
                    $ref: "#/components/schemas/BloodDonation"
        "400":
          description: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: L·∫•y danh s√°ch hi·∫øn m√°u
      tags:
        - Blood Donation
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, confirmed, cancelled, completed]
        - in: query
          name: facilityId
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: L·∫•y danh s√°ch hi·∫øn m√°u th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L·∫•y danh s√°ch hi·∫øn m√°u th√†nh c√¥ng
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonation"
        "400":
          description: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-donation/user:
    get:
      summary: L·∫•y l·ªãch s·ª≠ hi·∫øn m√°u c·ªßa ng∆∞·ªùi d√πng
      tags:
        - Blood Donation
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: L·∫•y danh s√°ch hi·∫øn m√°u th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L·∫•y danh s√°ch hi·∫øn m√°u th√†nh c√¥ng
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonation"
        "400":
          description: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-donation/{id}:
    get:
      summary: L·∫•y chi ti·∫øt m·ªôt b·∫£n ghi hi·∫øn m√°u
      tags:
        - Blood Donation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID b·∫£n ghi hi·∫øn m√°u
      responses:
        "200":
          description: L·∫•y chi ti·∫øt b·∫£n ghi hi·∫øn m√°u th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L·∫•y chi ti·∫øt b·∫£n ghi hi·∫øn m√°u th√†nh c√¥ng
                  data:
                    $ref: "#/components/schemas/BloodDonation"
        "404":
          description: Kh√¥ng t√¨m th·∫•y b·∫£n ghi hi·∫øn m√°u
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Update blood donation record
      description: Update blood donation with start time or completion status
      tags:
        - Blood Donation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Blood donation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: ["confirmed", "completed", "cancelled"]
                  description: Donation status
                  example: "completed"
                notes:
                  type: string
                  description: Additional notes
                  example: "Donation completed successfully"
                quantity:
                  type: number
                  description: Quantity of blood donated
                  example: 350
      responses:
        "200":
          description: Blood donation updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "C·∫≠p nh·∫≠t b·∫£n ghi hi·∫øn m√°u th√†nh c√¥ng"
                  data:
                    $ref: "#/components/schemas/BloodDonation"
        "404":
          description: Blood donation not found
        "403":
          description: Forbidden (requires staff role)
  /blood-request:
    post:
      summary: Create a new blood request
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - bloodType
                - bloodComponent
                - quantity
                - preferredDate
                - consent
                - medicalDocuments
              properties:
                bloodType: { type: string, example: "A+" }
                bloodComponent:
                  {
                    type: string,
                    enum: ["whole_blood", "red_cells", "platelets", "plasma"],
                  }
                quantity: { type: number, minimum: 1 }
                isUrgent: { type: boolean, default: false }
                street: { type: string }
                city: { type: string }
                lat: { type: number }
                lng: { type: number }
                reason: { type: string }
                medicalDetails: { type: string }
                note: { type: string }
                preferredDate: { type: string, format: date-time }
                consent: { type: boolean }
                facilityId: { type: string }
                medicalDocuments:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 5
                  minItems: 1
      responses:
        "201":
          description: Blood request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: "#/components/schemas/BloodRequest" }
        "400":
          description: Invalid input
  /blood-request/facility:
    get:
      summary: Get all blood requests for a facility
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of records per page
        - in: query
          name: status
          schema:
            {
              type: string,
              enum:
                ["pending", "approved", "rejected", "fulfilled", "cancelled"],
            }
          description: Filter by request status
        - in: query
          name: search
          schema: { type: string }
          description: Search term for patientName, contactName, or reason
        - in: query
          name: sortBy
          schema:
            {
              type: string,
              enum:
                [
                  "createdAt",
                  "updatedAt",
                  "quantity",
                  "status",
                  "preferredDate",
                ],
              default: "createdAt",
            }
          description: Field to sort by
        - in: query
          name: sortOrder
          schema: { type: integer, enum: [1, -1], default: -1 }
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of blood requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get facility blood requests successfully",
                    }
                  data:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/BloodRequest" },
                    }
                  metadata: { $ref: "#/components/schemas/Pagination" }
        "400":
          description: Invalid input
  /blood-request/facility/{facilityId}:
    get:
      summary: Get all blood requests for a facility
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          required: true
          schema: { type: string }
          description: Facility ID
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of records per page
        - in: query
          name: status
          schema:
            {
              type: string,
              enum:
                ["pending", "approved", "rejected", "fulfilled", "cancelled"],
            }
          description: Filter by request status
        - in: query
          name: search
          schema: { type: string }
          description: Search term for patientName, contactName, or reason
        - in: query
          name: sortBy
          schema:
            {
              type: string,
              enum:
                [
                  "createdAt",
                  "updatedAt",
                  "quantity",
                  "status",
                  "preferredDate",
                ],
              default: "createdAt",
            }
          description: Field to sort by
        - in: query
          name: sortOrder
          schema: { type: integer, enum: [1, -1], default: -1 }
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of blood requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get facility blood requests successfully",
                    }
                  data:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/BloodRequest" },
                    }
                  metadata: { $ref: "#/components/schemas/Pagination" }
        "400":
          description: Invalid input
  /blood-request/facility/{facilityId}/user/{userId}:
    get:
      summary: Get all blood requests for a specific user in a facility
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          required: true
          schema: { type: string }
          description: Facility ID
        - in: path
          name: userId
          required: true
          schema: { type: string }
          description: User ID
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of records per page
        - in: query
          name: status
          schema:
            {
              type: string,
              enum:
                ["pending", "approved", "rejected", "fulfilled", "cancelled"],
            }
          description: Filter by request status
        - in: query
          name: search
          schema: { type: string }
          description: Search term for patientName, contactName, or reason
        - in: query
          name: sortBy
          schema:
            {
              type: string,
              enum:
                [
                  "createdAt",
                  "updatedAt",
                  "quantity",
                  "status",
                  "preferredDate",
                ],
              default: "createdAt",
            }
          description: Field to sort by
        - in: query
          name: sortOrder
          schema: { type: integer, enum: [1, -1], default: -1 }
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of blood requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get facility user blood requests successfully",
                    }
                  data:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/BloodRequest" },
                    }
                  metadata: { $ref: "#/components/schemas/Pagination" }
        "400":
          description: Invalid input
  /blood-request/facility/{facilityId}/{id}:
    get:
      summary: Get details of a facility's blood request
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          required: true
          schema: { type: string }
          description: Facility ID
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Blood request ID
      responses:
        "200":
          description: Blood request details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get blood request details successfully",
                    }
                  data: { $ref: "#/components/schemas/BloodRequest" }
        "400":
          description: Invalid request or unauthorized
  /blood-request/facility/{facilityId}/{id}/status:
    patch:
      summary: Update blood request status
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          required: true
          schema: { type: string }
          description: Facility ID
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Blood request ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  {
                    type: string,
                    enum:
                      [
                        "pending",
                        "approved",
                        "rejected",
                        "fulfilled",
                        "cancelled",
                      ],
                  }
                staffId: { type: string }
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Update blood request status successfully",
                    }
                  data:
                    {
                      type: object,
                      properties:
                        {
                          _id: { type: string },
                          status: { type: string },
                          staffId: { type: string },
                          updatedAt: { type: string, format: date-time },
                        },
                    }
        "400":
          description: Invalid status or unauthorized
  /blood-request/user:
    get:
      summary: Get all blood requests for current user
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of records per page
        - in: query
          name: status
          schema:
            {
              type: string,
              enum:
                ["pending", "approved", "rejected", "fulfilled", "cancelled"],
            }
          description: Filter by request status
        - in: query
          name: search
          schema: { type: string }
          description: Search term for patientName, contactName, or reason
        - in: query
          name: sortBy
          schema:
            {
              type: string,
              enum:
                [
                  "createdAt",
                  "updatedAt",
                  "quantity",
                  "status",
                  "preferredDate",
                ],
              default: "createdAt",
            }
          description: Field to sort by
        - in: query
          name: sortOrder
          schema: { type: integer, enum: [1, -1], default: -1 }
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of blood requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get user blood requests successfully",
                    }
                  data:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/BloodRequest" },
                    }
                  metadata: { $ref: "#/components/schemas/Pagination" }
        "400":
          description: Invalid input
  /blood-request/user/{id}:
    get:
      summary: Get details of a user's blood request
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Blood request ID
      responses:
        "200":
          description: Blood request details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get blood request details successfully",
                    }
                  data: { $ref: "#/components/schemas/BloodRequest" }
        "400":
          description: Invalid request or unauthorized
  /facility:
    get:
      summary: Get all facilities
      tags:
        - Facility
      parameters:
        - in: query
          name: latitude
          schema:
            type: number
          description: User's latitude for distance calculation
        - in: query
          name: longitude
          schema:
            type: number
          description: User's longitude for distance calculation
        - in: query
          name: distance
          schema:
            type: number
          description: Maximum distance in kilometers
      responses:
        "200":
          description: Facilities retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Facility"
    post:
      summary: Create a new facility
      tags:
        - Facility
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "City Hospital"
                address:
                  type: string
                  example: "123 Main Street"
                longitude:
                  type: number
                  example: 106.700
                latitude:
                  type: number
                  example: 10.776
                contactPhone:
                  type: string
                  example: "0987654321"
                contactEmail:
                  type: string
                  format: email
                  example: "contact@hospital.com"
                managerId:
                  type: string
                  example: "60f7b3a4b9c4e1234567890"
                doctorIds:
                  type: string
                  example: "['60f7b3a4b9c4e1234567891', '60f7b3a4b9c4e1234567892']"
                nurseIds:
                  type: string
                  example: "['60f7b3a4b9c4e1234567893', '60f7b3a4b9c4e1234567894']"
                image:
                  type: string
                  format: binary
              required:
                - name
                - address
                - longitude
                - latitude
                - contactPhone
                - contactEmail
                - managerId
      responses:
        "201":
          description: Facility created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Facility"
  /facility/{id}:
    get:
      summary: Get facility by ID
      tags:
        - Facility
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Facility ID
      responses:
        "200":
          description: Facility retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Facility"
    put:
      summary: Update facility
      tags:
        - Facility
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Facility ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                longitude:
                  type: number
                latitude:
                  type: number
                contactPhone:
                  type: string
                contactEmail:
                  type: string
                isActive:
                  type: boolean
      responses:
        "200":
          description: Facility updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Facility"
  /facility/delete/{id}:
    put:
      summary: Delete facility (soft delete)
      tags:
        - Facility
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Facility ID
      responses:
        "200":
          description: Facility deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
  /feedback/{facilityId}:
    get:
      summary: Get all feedback for a facility
      tags:
        - Feedback
      parameters:
        - in: path
          name: facilityId
          required: true
          schema:
            type: string
          description: Facility ID
      responses:
        '200':
          description: Successfully retrieved feedback
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  feedback:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feedback'
        '404':
          description: Feedback not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback:
    post:
      summary: Create new feedback
      tags:
        - Feedback
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                facilityId:
                  type: string
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
              required:
                - userId
                - facilityId
                - rating
      responses:
        '201':
          description: Feedback created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/{id}:
    get:
      summary: Get feedback by ID
      tags:
        - Feedback
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Feedback ID
      responses:
        '200':
          description: Successfully retrieved feedback
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '404':
          description: Feedback not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update feedback
      tags:
        - Feedback
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Feedback ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '200':
          description: Feedback updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Feedback not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/delete/{id}:
    put:
      summary: Delete feedback (soft delete)
      tags:
        - Feedback
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Feedback ID
      responses:
        '200':
          description: Feedback deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Feedback not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /content-category:
    post:
      summary: Create a new content category
      tags:
        - Content Category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the category
                description:
                  type: string
                  description: Description of the category
              required:
                - name
      responses:
        '201':
          description: Content category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get all content categories
      tags:
        - Content Category
      responses:
        '200':
          description: Successfully retrieved content categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentCategory'

  /content-category/{id}:
    put:
      summary: Update a content category
      tags:
        - Content Category
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Content Category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the category
                description:
                  type: string
                  description: Description of the category
      responses:
        '200':
          description: Content category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCategory'
        '404':
          description: Content category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /content:
    post:
      summary: Create new content
      tags:
        - Content
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [introduction, document, blog]
                categoryId:
                  type: string
                title:
                  type: string
                content:
                  type: string
                summary:
                  type: string
                authorId:
                  type: string
                image:
                  type: string
                  format: binary
              required:
                - type
                - categoryId
                - title
                - content
                - authorId
      responses:
        '201':
          description: Content created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get all contents
      tags:
        - Content
      responses:
        '200':
          description: Successfully retrieved contents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'

  /content/{id}:
    get:
      summary: Get content by ID
      tags:
        - Content
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Content ID
      responses:
        '200':
          description: Successfully retrieved content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update content
      tags:
        - Content
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Content ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [introduction, document, blog]
                categoryId:
                  type: string
                title:
                  type: string
                content:
                  type: string
                summary:
                  type: string
                status:
                  type: string
                  enum: [draft, published, archived]
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Content updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /health-check:
    post:
      summary: Create a new health check
      description: Allows a nurse to create a health check record for a blood donation registration. The staff ID is derived from the authenticated user's token.
      tags:
        - Health Checks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - registrationId
                - userId
                - doctorId
                - checkDate
              properties:
                registrationId:
                  type: string
                  description: The ID of the blood donation registration
                  example: "60f7b3a4b9c4e1234567890"
                userId:
                  type: string
                  description: The ID of the user (donor) being checked
                  example: "60f7b3a4b9c4e1234567891"
                doctorId:
                  type: string
                  description: The ID of the doctor assigned to review the health check
                  example: "60f7b3a4b9c4e1234567892"
      responses:
        "201":
          description: Health check created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Create health check successfully"
                  data:
                    $ref: "#/components/schemas/HealthCheck"
        "400":
          description: Invalid input (e.g., missing required fields, invalid IDs, or future checkDate)
        "403":
          description: Forbidden (requires nurse role)
  /health-check/{id}:
    patch:
      summary: Update health check
      description: Update a health check record (doctor only)
      tags:
        - Health Checks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Health check ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isEligible:
                  type: boolean
                  description: Whether the donor is eligible to donate
                bloodPressure:
                  type: string
                  example: "120/80"
                  description: Blood pressure reading
                hemoglobin:
                  type: number
                  minimum: 10
                  maximum: 20
                  description: Hemoglobin level in g/dL
                weight:
                  type: number
                  minimum: 40
                  maximum: 150
                  description: Weight in kg
                pulse:
                  type: number
                  minimum: 50
                  maximum: 120
                  description: Pulse rate in bpm
                temperature:
                  type: number
                  minimum: 35
                  maximum: 38
                  description: Temperature in ¬∞C
                generalCondition:
                  type: string
                  description: General health condition
                deferralReason:
                  type: string
                  description: Reason for deferral if not eligible
                notes:
                  type: string
                  description: Additional notes
      responses:
        "200":
          description: Health check updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Update health check successfully"
                  data:
                    $ref: "#/components/schemas/HealthCheck"
        "400":
          description: Invalid input
        "403":
          description: Forbidden (requires doctor role)
        "404":
          description: Health check not found
    get:
      summary: Get health check details
      description: Get detailed information about a specific health check
      tags:
        - Health Checks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Health check ID
      responses:
        "200":
          description: Health check details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get health check details successfully"
                  data:
                    $ref: "#/components/schemas/HealthCheck"
        "400":
          description: Invalid input
        "403":
          description: Forbidden (user can only access their own health checks)
        "404":
          description: Health check not found
  /health-check/facility:
    get:
      summary: Get facility health checks
      description: Get paginated list of health checks for a facility
      tags:
        - Health Checks
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records per page
        - in: query
          name: status
          schema:
            type: string
            enum: [eligible, not_eligible]
          description: Filter by eligibility status
        - in: query
          name: search
          schema:
            type: string
          description: Search term for generalCondition, notes, or deferralReason
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [createdAt, updatedAt, checkDate]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: integer
            enum: [1, -1]
            default: -1
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of health checks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get health checks successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/HealthCheck"
                  metadata:
                    $ref: "#/components/schemas/Pagination"
        "400":
          description: Invalid input
        "403":
          description: Forbidden (requires manager role)
  /health-check/doctor:
    get:
      summary: Get doctor's health checks
      description: Get paginated list of health checks assigned to a doctor
      tags:
        - Health Checks
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records per page
        - in: query
          name: status
          schema:
            type: string
            enum: [eligible, not_eligible]
          description: Filter by eligibility status
        - in: query
          name: search
          schema:
            type: string
          description: Search term for generalCondition, notes, or deferralReason
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [createdAt, updatedAt, checkDate]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: integer
            enum: [1, -1]
            default: -1
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of health checks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get health checks successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/HealthCheck"
                  metadata:
                    $ref: "#/components/schemas/Pagination"
        "400":
          description: Invalid input
        "403":
          description: Forbidden (requires doctor role)
  /health-check/user:
    get:
      summary: Get user's health checks
      description: Get paginated list of health checks for the current user
      tags:
        - Health Checks
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records per page
        - in: query
          name: status
          schema:
            type: string
            enum: [eligible, not_eligible]
          description: Filter by eligibility status
        - in: query
          name: search
          schema:
            type: string
          description: Search term for generalCondition, notes, or deferralReason
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [createdAt, updatedAt, checkDate]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: integer
            enum: [1, -1]
            default: -1
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of health checks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get health checks successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/HealthCheck"
                  metadata:
                    $ref: "#/components/schemas/Pagination"
        "400":
          description: Invalid input
        "403":
          description: Forbidden (requires user role)
    
  /health-check/nurse:
    get:
      summary: Get nurse's health checks
      description: Get paginated list of health checks created by a nurse
      tags:
        - Health Checks
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records per page
        - in: query
          name: status
          schema:
            type: string
            enum: [eligible, not_eligible]
          description: Filter by eligibility status
        - in: query
          name: search
          schema:
            type: string
          description: Search term for generalCondition, notes, or deferralReason
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [createdAt, updatedAt, checkDate]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: integer
            enum: [1, -1]
            default: -1
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of health checks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get health checks successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/HealthCheck"
                  metadata:
                    $ref: "#/components/schemas/Pagination"
        "400":
          description: Invalid input
        "403":
          description: Forbidden (requires nurse role)

  # Staff and Manager APIs for Blood Donation Registration
  /blood-donation-registration/staff/assigned:
    get:
      summary: Get staff assigned blood donation registrations (for Nurse)
      description: Get paginated list of blood donation registrations assigned to the authenticated staff member
      tags:
        - Blood Donation Registration - Staff
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending_approval, registered, checked_in, in_consult, rejected, waiting_donation, donating, donated, resting, post_rest_check, completed, cancelled]
          description: Filter by registration status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term in notes
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for preferred date filter
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for preferred date filter
        - in: query
          name: bloodGroupId
          schema:
            type: string
          description: Filter by blood group ID
      responses:
        "200":
          description: Staff assigned registrations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get registrations successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonationRegistration"
                  metadata:
                    $ref: "#/components/schemas/Pagination"
        "403":
          description: Forbidden (requires staff role)

  /blood-donation-registration/facility/all:
    get:
      summary: Get facility blood donation registrations (for Manager)
      description: Get paginated list of all blood donation registrations for the facility with optional statistics
      tags:
        - Blood Donation Registration - Manager
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending_approval, registered, checked_in, in_consult, rejected, waiting_donation, donating, donated, resting, post_rest_check, completed, cancelled]
          description: Filter by registration status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term in notes
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for preferred date filter
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for preferred date filter
        - in: query
          name: bloodGroupId
          schema:
            type: string
          description: Filter by blood group ID
        - in: query
          name: staffId
          schema:
            type: string
          description: Filter by assigned staff ID
        - in: query
          name: includeStats
          schema:
            type: boolean
            default: false
          description: Include statistics in response
      responses:
        "200":
          description: Facility registrations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get registrations successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonationRegistration"
                  metadata:
                    $ref: "#/components/schemas/Pagination"
                  statistics:
                    type: object
                    description: Statistics if includeStats=true
        "403":
          description: Forbidden (requires manager role)

  /blood-donation-registration/facility/statistics:
    get:
      summary: Get blood donation registration statistics (for Manager)
      description: Get comprehensive statistics for blood donation registrations in the facility
      tags:
        - Blood Donation Registration - Manager
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for statistics
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for statistics
        - in: query
          name: groupBy
          schema:
            type: string
            enum: [day, week, month]
            default: day
          description: Group statistics by time period
      responses:
        "200":
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get statistics successfully"
                  data:
                    $ref: "#/components/schemas/RegistrationStatistics"
        "403":
          description: Forbidden (requires manager role)

  /blood-donation-registration/check-in:
    post:
      summary: Process check-in via QR code
      description: Update registration status to checked-in using QR code data
      tags:
        - Blood Donation Registration - Staff
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                qrData:
                  oneOf:
                    - type: string
                      description: QR code data as JSON string
                      example: '{"registrationId":"675a1b2c3d4e5f6789012345","userId":"675a1b2c3d4e5f6789012346","bloodGroupId":"675a1b2c3d4e5f6789012347"}'
                    - type: object
                      description: QR code data as JSON object
                      properties:
                        registrationId:
                          type: string
                          example: "675a1b2c3d4e5f6789012345"
                        userId:
                          type: string
                          example: "675a1b2c3d4e5f6789012346"
                        bloodGroupId:
                          type: string
                          example: "675a1b2c3d4e5f6789012347"
              required:
                - qrData
            examples:
              json_string:
                summary: QR Data as JSON String
                value:
                  qrData: '{"registrationId":"675a1b2c3d4e5f6789012345","userId":"675a1b2c3d4e5f6789012346","bloodGroupId":"675a1b2c3d4e5f6789012347"}'
              json_object:
                summary: QR Data as JSON Object
                value:
                  qrData:
                    registrationId: "675a1b2c3d4e5f6789012345"
                    userId: "675a1b2c3d4e5f6789012346"
                    bloodGroupId: "675a1b2c3d4e5f6789012347"
      responses:
        "200":
          description: Check-in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Check-in successful"
                  data:
                    $ref: "#/components/schemas/BloodDonationRegistration"
              example:
                message: "Check-in successful"
                data:
                  _id: "675a1b2c3d4e5f6789012345"
                  status: "checked_in"
                  checkInAt: "2024-01-15T09:30:00.000Z"
                  userId:
                    _id: "675a1b2c3d4e5f6789012346"
                    fullName: "Nguyen Van A"
                    email: "nguyenvana@example.com"
                    phone: "0123456789"
                  facilityId:
                    _id: "675a1b2c3d4e5f6789012348"
                    name: "Hospital ABC"
                    street: "123 Main Street"
                    city: "Ho Chi Minh City"
                  bloodGroupId:
                    _id: "675a1b2c3d4e5f6789012347"
                    name: "A+"
                  preferredDate: "2024-01-15T09:00:00.000Z"
                  expectedQuantity: 450
        "400":
          description: Invalid QR code or registration already checked in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                invalid_qr:
                  summary: Invalid QR Code Format
                  value:
                    message: "QR code data kh√¥ng h·ª£p l·ªá"
                missing_registration_id:
                  summary: Missing Registration ID
                  value:
                    message: "QR code kh√¥ng ch·ª©a th√¥ng tin registration ID"
                already_checked_in:
                  summary: Already Checked In
                  value:
                    message: "ƒêƒÉng k√Ω n√†y ƒë√£ ƒë∆∞·ª£c check-in ho·∫∑c kh√¥ng ·ªü tr·∫°ng th√°i cho ph√©p check-in"
        "403":
          description: Forbidden (requires nurse or manager role)
        "404":
          description: Registration not found

  # Process Donation Log APIs
  /process-donation-log:
    get:
      summary: Get process donation logs
      description: Get paginated list of process donation logs with filtering and search
      tags:
        - Process Donation Log
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending_approval, registered, checked_in, in_consult, rejected, waiting_donation, donating, donated, resting, post_rest_check, completed, cancelled]
          description: Filter by status
        - in: query
          name: registrationId
          schema:
            type: string
          description: Filter by registration ID
        - in: query
          name: changedBy
          schema:
            type: string
          description: Filter by staff who made the change
        - in: query
          name: search
          schema:
            type: string
          description: Search term in notes
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records per page
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Start date for changedAt filter
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: End date for changedAt filter
      responses:
        "200":
          description: Process donation logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get logs successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProcessDonationLog"
                  metadata:
                    $ref: "#/components/schemas/Pagination"
        "403":
          description: Forbidden (requires staff role)

    post:
      summary: Create process donation log
      description: Create a new process donation log entry
      tags:
        - Process Donation Log
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                registrationId:
                  type: string
                  description: Blood donation registration ID
                  example: "60d0fe4f5311236168a109ca"
                userId:
                  type: string
                  description: User ID
                  example: "60d0fe4f5311236168a109cb"
                status:
                  type: string
                  enum: [pending_approval, registered, checked_in, in_consult, rejected, waiting_donation, donating, donated, resting, post_rest_check, completed, cancelled]
                  description: New status
                  example: "checked_in"
                notes:
                  type: string
                  description: Additional notes
                  example: "Patient arrived on time"
              required:
                - registrationId
                - userId
                - status
      responses:
        "201":
          description: Process donation log created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Log created successfully"
                  data:
                    $ref: "#/components/schemas/ProcessDonationLog"
        "400":
          description: Invalid input data
        "403":
          description: Forbidden (requires staff role)

  /process-donation-log/registration/{registrationId}:
    get:
      summary: Get logs by registration ID
      description: Get all process donation logs for a specific registration (timeline)
      tags:
        - Process Donation Log
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: registrationId
          required: true
          schema:
            type: string
          description: Blood donation registration ID
      responses:
        "200":
          description: Registration logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get logs successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProcessDonationLog"
        "400":
          description: Invalid registration ID
        "403":
          description: Forbidden (requires staff role)

  /process-donation-log/staff/my-logs:
    get:
      summary: Get staff's process donation logs
      description: Get process donation logs created by the authenticated staff member
      tags:
        - Process Donation Log
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of records per page
      responses:
        "200":
          description: Staff logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get logs successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProcessDonationLog"
                  metadata:
                    $ref: "#/components/schemas/Pagination"
        "403":
          description: Forbidden (requires staff role)

  /process-donation-log/{logId}:
    get:
      summary: Get process donation log by ID
      description: Get detailed information of a specific process donation log
      tags:
        - Process Donation Log
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: logId
          required: true
          schema:
            type: string
          description: Process donation log ID
      responses:
        "200":
          description: Process donation log details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get log details successfully"
                  data:
                    $ref: "#/components/schemas/ProcessDonationLog"
        "400":
          description: Invalid log ID
        "403":
          description: Forbidden (requires staff role)
        "404":
          description: Process donation log not found

  /blood-donation:
    post:
      summary: Create blood donation record
      description: Nurse creates blood donation record (WAITING_DONATION ‚Üí DONATING)
      tags:
        - Blood Donation 
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User ID of the donor
                  example: "60d0fe4f5311236168a109cb"
                bloodGroupId:
                  type: string
                  description: Blood group ID
                  example: "60d0fe4f5311236168a109cc"
                bloodDonationRegistrationId:
                  type: string
                  description: Blood donation registration ID
                  example: "60d0fe4f5311236168a109ca"
                bloodComponent:
                  type: string
                  enum: ["M√°u to√†n ph·∫ßn", "H·ªìng c·∫ßu", "Huy·∫øt t∆∞∆°ng", "Ti·ªÉu c·∫ßu"]
                  description: Blood component type
                  example: "M√°u to√†n ph·∫ßn"
                quantity:
                  type: number
                  description: Quantity in ml
                  example: 450
                donationDate:
                  type: string
                  format: date-time
                  description: Donation date
                  example: "2025-06-01T10:00:00Z"
              required:
                - userId
                - bloodGroupId
                - bloodComponent
                - quantity
                - donationDate
      responses:
        "201":
          description: Blood donation record created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Create blood donation successfully"
                  data:
                    $ref: "#/components/schemas/BloodDonation"
        "400":
          description: Invalid input data
        "403":
          description: Forbidden (requires staff role)

  /blood-donation/{id}:
    patch:
      summary: Update blood donation record
      description: Update blood donation with start time or completion status
      tags:
        - Blood Donation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Blood donation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                donationStartAt:
                  type: string
                  format: date-time
                  description: When donation starts (transitions to DONATING)
                  example: "2025-06-01T11:00:00Z"
                status:
                  type: string
                  enum: ["confirmed", "completed", "cancelled"]
                  description: Donation status
                  example: "completed"
                notes:
                  type: string
                  description: Additional notes
                  example: "Donation completed successfully"
      responses:
        "200":
          description: Blood donation updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "C·∫≠p nh·∫≠t b·∫£n ghi hi·∫øn m√°u th√†nh c√¥ng"
                  data:
                    $ref: "#/components/schemas/BloodDonation"
        "404":
          description: Blood donation not found
        "403":
          description: Forbidden (requires staff role)

  

  # Donor Status Log APIs
  /donor-status-log:
    post:
      summary: Create donor status log
      description: Create log for donor status during resting phase
      tags:
        - Donor Status Logs
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                donationId:
                  type: string
                  description: Blood donation ID
                  example: "60d0fe4f5311236168a109cd"
                userId:
                  type: string
                  description: User ID of the donor
                  example: "60d0fe4f5311236168a109cb"
              required:
                - donationId
                - userId
      responses:
        "201":
          description: Donor status log created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "T·∫°o b·∫£n ghi tr·∫°ng th√°i th√†nh c√¥ng"
                  data:
                    $ref: "#/components/schemas/DonorStatusLog"
        "400":
          description: Invalid input data
        "403":
          description: Forbidden (requires staff role)

  /donor-status-log/donation/{donationId}:
    get:
      summary: Get donor status logs by donation
      description: Get all status logs for a specific donation
      tags:
        - Donor Status Logs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: donationId
          schema:
            type: string
          required: true
          description: Blood donation ID
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Donor status logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y danh s√°ch tr·∫°ng th√°i th√†nh c√¥ng"
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/DonorStatusLog"
                      pagination:
                        $ref: "#/components/schemas/Pagination"

  /donor-status-log/user/{userId}:
    get:
      summary: Get donor status logs by user
      description: Get all status logs for a specific user
      tags:
        - Donor Status Logs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: User donor status logs retrieved successfully

  /donor-status-log/{id}:
    get:
      summary: Get donor status log detail
      description: Get detailed information of a specific donor status log
      tags:
        - Donor Status Logs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Donor status log ID
      responses:
        "200":
          description: Donor status log detail retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y chi ti·∫øt tr·∫°ng th√°i th√†nh c√¥ng"
                  data:
                    $ref: "#/components/schemas/DonorStatusLog"
        "404":
          description: Donor status log not found
    patch: 
      summary: Transition to resting phase
      description: Transition donor status log from DONATED to RESTING status
      tags:
        - Donor Status Logs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Donor status log ID
      requestBody:  
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
                  description: Additional notes for the transition
                  example: "Patient moved to resting area"
                status:
                  type: string
                  enum: ["stable", "fatigued", "needs_monitoring", "other"]
                  description: Donor status
                  example: "stable"
                phase:
                  type: string
                  enum: ["resting", "post_rest_check"]
                  description: Current phase
                  example: "resting"              
      responses:
        "200":
          description: Successfully transitioned donor status log
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Chuy·ªÉn sang giai ƒëo·∫°n ngh·ªâ ng∆°i th√†nh c√¥ng"
                  data:
                    $ref: "#/components/schemas/DonorStatusLog"
        "400":
          description: Invalid status transition
        "404":
          description: Donor status log not found
  /blood-unit:
    post:
      summary: Create blood units from donation
      description: Doctor creates blood units after donation completion (DONATED ‚Üí testing)
      tags:
        - Blood Units
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                donationId:
                  type: string
                  description: Blood donation ID
                  example: "60d0fe4f5311236168a109cd"
                units:
                  type: array
                  description: Array of blood units to create
                  items:
                    type: object
                    properties:
                      component:
                        type: string
                        enum: ["M√°u to√†n ph·∫ßn", "H·ªìng c·∫ßu", "Huy·∫øt t∆∞∆°ng", "Ti·ªÉu c·∫ßu"]
                        example: "M√°u to√†n ph·∫ßn"
                      quantity:
                        type: number
                        description: Quantity in ml
                        example: 450
                    required:
                      - component
                      - quantity
              required:
                - donationId
                - units
      responses:
        "201":
          description: Blood units created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "T·∫°o blood units th√†nh c√¥ng"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodUnit"
        "400":
          description: Invalid input data or donation not completed
        "403":
          description: Forbidden (requires doctor role)

  /blood-unit/{id}:
    get:
      summary: Get blood unit detail
      description: Get detailed information of a specific blood unit
      tags:
        - Blood Units
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Blood unit ID
      responses:
        "200":
          description: Blood unit detail retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y chi ti·∫øt blood unit th√†nh c√¥ng"
                  data:
                    $ref: "#/components/schemas/BloodUnit"
        "404":
          description: Blood unit not found

    patch:
      summary: Update blood unit (test results and status)
      description: Doctor updates test results and approves/rejects blood unit
      tags:
        - Blood Units
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Blood unit ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                testResults:
                  type: object
                  properties:
                    hiv:
                      type: string
                      enum: ["positive", "negative", "pending"]
                      example: "negative"
                    hepatitisB:
                      type: string
                      enum: ["positive", "negative", "pending"]
                      example: "negative"
                    hepatitisC:
                      type: string
                      enum: ["positive", "negative", "pending"]
                      example: "negative"
                    syphilis:
                      type: string
                      enum: ["positive", "negative", "pending"]
                      example: "negative"
                    notes:
                      type: string
                      description: Additional test notes
                      example: "All tests passed"
                status:
                  type: string
                  enum: ["testing", "available", "rejected", "reserved", "used", "expired"]
                  description: Unit status
                  example: "available"
                notes:
                  type: string
                  description: Additional notes
                  example: "Unit approved for use"
      responses:
        "200":
          description: Blood unit updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "C·∫≠p nh·∫≠t blood unit th√†nh c√¥ng"
                  data:
                    $ref: "#/components/schemas/BloodUnit"
        "400":
          description: Invalid input data
        "403":
          description: Forbidden (requires doctor role)
        "404":
          description: Blood unit not found

  /blood-unit/donation/{donationId}:
    get:
      summary: Get blood units by donation
      description: Get all blood units created from a specific donation
      tags:
        - Blood Units
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: donationId
          schema:
            type: string
          required: true
          description: Blood donation ID
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Blood units retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y danh s√°ch blood units th√†nh c√¥ng"
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/BloodUnit"
                      pagination:
                        $ref: "#/components/schemas/Pagination"

  /blood-unit/facility/{facilityId}:
    get:
      summary: Get blood units by facility (Manager)
      description: Get blood units for facility management
      tags:
        - Blood Units
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          schema:
            type: string
          required: true
          description: Facility ID
        - in: query
          name: status
          schema:
            type: string
            enum: ["testing", "available", "rejected", "reserved", "used", "expired"]
        - in: query
          name: component
          schema:
            type: string
            enum: ["M√°u to√†n ph·∫ßn", "H·ªìng c·∫ßu", "Huy·∫øt t∆∞∆°ng", "Ti·ªÉu c·∫ßu"]
        - in: query
          name: bloodGroupId
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
          description: Search by barcode
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Blood units retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y danh s√°ch blood units theo facility th√†nh c√¥ng"
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/BloodUnit"
                      pagination:
                        $ref: "#/components/schemas/Pagination"

  # Blood Inventory APIs
  /blood-inventory/facility/{facilityId}:
    get:
      summary: Get inventory by facility (Manager)
      description: Get blood inventory for facility management
      tags:
        - Blood Inventory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          schema:
            type: string
          required: true
          description: Facility ID
        - in: query
          name: componentId
          schema:
            type: string
          description: Filter by blood component ID
        - in: query
          name: groupId
          schema:
            type: string
          description: Filter by blood group ID
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Inventory retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y inventory theo facility th√†nh c√¥ng"
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/BloodInventory"
                      pagination:
                        $ref: "#/components/schemas/Pagination"

  /blood-inventory/detail/{id}:
    get:
      summary: Get inventory detail
      description: Get detailed inventory information including unit statistics
      tags:
        - Blood Inventory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Inventory ID
      responses:
        "200":
          description: Inventory detail retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y chi ti·∫øt inventory th√†nh c√¥ng"
                  data:
                    $ref: "#/components/schemas/BloodInventoryDetail"

  /blood-inventory:
    get:
      summary: Get all blood inventory
      description: Get all blood inventory records across all facilities
      tags:
        - Blood Inventory
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Inventory retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y kho m√°u th√†nh c√¥ng"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodInventory"
              example:
                message: "L·∫•y kho m√°u th√†nh c√¥ng"
                data:
                  - _id: "60d0fe4f5311236168a109ca"
                    facilityId:
                      _id: "60d0fe4f5311236168a109cb"
                      name: "B·ªánh vi·ªán Ch·ª£ R·∫´y"
                      code: "CR001"
                    componentId:
                      _id: "60d0fe4f5311236168a109cc"
                      name: "M√°u to√†n ph·∫ßn"
                    groupId:
                      _id: "60d0fe4f5311236168a109cd"
                      name: "O+"
                      type: "O"
                    totalQuantity: 2500
                    createdAt: "2023-01-01T10:00:00.000Z"
                    updatedAt: "2023-01-02T15:30:00.000Z"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (requires staff role)

  /blood-inventory/facility/{facilityId}/available:
    get:
      summary: Get available inventory by facility
      description: Get available blood inventory for a specific facility (totalQuantity > 0)
      tags:
        - Blood Inventory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          schema:
            type: string
          required: true
          description: Facility ID
          example: "60d0fe4f5311236168a109cb"
        - in: query
          name: componentId
          schema:
            type: string
          description: Filter by blood component ID
          example: "60d0fe4f5311236168a109cc"
        - in: query
          name: groupId
          schema:
            type: string
          description: Filter by blood group ID
          example: "60d0fe4f5311236168a109cd"
      responses:
        "200":
          description: Available inventory retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y kho m√°u th√†nh c√¥ng"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodInventory"
              example:
                message: "L·∫•y kho m√°u th√†nh c√¥ng"
                data:
                  - _id: "60d0fe4f5311236168a109ca"
                    facilityId:
                      _id: "60d0fe4f5311236168a109cb"
                      name: "B·ªánh vi·ªán Ch·ª£ R·∫´y"
                      code: "CR001"
                    componentId:
                      _id: "60d0fe4f5311236168a109cc"
                      name: "M√°u to√†n ph·∫ßn"
                    groupId:
                      _id: "60d0fe4f5311236168a109cd"
                      name: "O+"
                      type: "O"
                    totalQuantity: 1500
        "404":
          description: Facility not found
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (requires staff role)

  /blood-inventory/facility/{facilityId}:
    get:
      summary: Get inventory by facility (Manager)
      description: Get blood inventory for facility management with pagination and detailed unit stats
      tags:
        - Blood Inventory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          schema:
            type: string
          required: true
          description: Facility ID
          example: "60d0fe4f5311236168a109cb"
        - in: query
          name: componentId
          schema:
            type: string
          description: Filter by blood component ID
          example: "60d0fe4f5311236168a109cc"
        - in: query
          name: groupId
          schema:
            type: string
          description: Filter by blood group ID
          example: "60d0fe4f5311236168a109cd"
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Items per page
      responses:
        "200":
          description: Inventory retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "L·∫•y inventory theo facility th√†nh c√¥ng"
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/BloodInventoryWithStats"
                      pagination:
                        $ref: "#/components/schemas/Pagination"
        "403":
          description: Forbidden (requires manager role)
        "404":
          description: Facility not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            _id:
              type: string
            fullName:
              type: string
            email:
              type: string
            role:
              type: string
              enum: [MEMBER, STAFF, ADMIN]
            avatar:
              type: string
              nullable: true
        tokens:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
    BloodDonationRegistration:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: object
          properties:
            _id:
              type: string
            fullName:
              type: string
            email:
              type: string
            phone:
              type: string
        facilityId:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            street:
              type: string
            city:
              type: string
        bloodGroupId:
          type: object
          properties:
            _id:
              type: string
            type:
              type: string
        bloodComponent:
          type: string
          enum: [M√°u to√†n ph·∫ßn, H·ªìng c·∫ßu, Huy·∫øt t∆∞∆°ng, Ti·ªÉu c·∫ßu]
        preferredDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, approved, rejected]
        source:
          type: string
          enum: [online, walk_in, campaign]
        notes:
          type: string
        location:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
        createdAt:
          type: string
          format: date-time
    BloodDonation:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: object
          properties:
            _id:
              type: string
            fullName:
              type: string
            email:
              type: string
            phone:
              type: string
        staffId:
          type: string
        bloodGroupId:
          type: object
          properties:
            _id:
              type: string
            type:
              type: string
        bloodDonationRegistrationId:
          type: object
          properties:
            _id:
              type: string
            preferredDate:
              type: string
              format: date-time
            facilityId:
              type: object
              properties:
                _id:
                  type: string
                name:
                  type: string
                street:
                  type: string
                city:
                  type: string
        bloodComponent:
          type: string
          enum: [whole_blood, red_cells, plasma, platelets]
        quantity:
          type: number
        donationDate:
          type: string
          format: date-time
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    BloodRequest:
      type: object
      properties:
        _id: { type: string }
        bloodId: { type: object, properties: { type: { type: string } } }
        userId:
          {
            type: object,
            properties:
              {
                fullName: { type: string },
                email: { type: string },
                phone: { type: string },
              },
          }
        facilityId:
          {
            type: object,
            properties:
              {
                name: { type: string },
                street: { type: string },
                city: { type: string },
              },
          }
        staffId:
          {
            type: object,
            properties:
              {
                fullName: { type: string },
                email: { type: string },
                phone: { type: string },
              },
          }
        patientName: { type: string }
        patientAge: { type: string }
        bloodComponent: { type: string }
        quantity: { type: number }
        isUrgent: { type: boolean }
        status: { type: string }
        location:
          {
            type: object,
            properties:
              {
                type: { type: string },
                coordinates: { type: array, items: { type: number } },
              },
          }
        street: { type: string }
        city: { type: string }
        contactName: { type: string }
        contactPhone: { type: string }
        contactEmail: { type: string }
        reason: { type: string }
        medicalDetails: { type: string }
        medicalDocumentUrl: { type: array, items: { type: string } }
        note: { type: string }
        preferredDate: { type: string, format: date-time }
        consent: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Facility:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        code:
          type: string
        address:
          type: string
        location:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
        contactPhone:
          type: string
        contactEmail:
          type: string
        mainImage:
          type: object
          properties:
            _id:
              type: string
            url:
              type: string
            isMain:
              type: boolean
        schedules:
          type: array
          items:
            type: object
            properties:
              dayOfWeek:
                type: number
                enum: [0, 1, 2, 3, 4, 5, 6]
              openTime:
                type: string
              closeTime:
                type: string
              isOpen:
                type: boolean
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Pagination:
      type: object
      properties:
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }
    HealthCheck:
      type: object
      properties:
        _id: { type: string }
        registrationId: { type: string }
        userId:
          {
            type: object,
            properties: { fullName: { type: string }, email: { type: string } },
          }
        doctorId: { type: object, properties: { position: { type: string } } }
        staffId: { type: object, properties: { position: { type: string } } }
        facilityId: { type: string }
        checkDate: { type: string, format: date-time }
        isEligible: { type: boolean }
        bloodPressure: { type: string }
        hemoglobin: { type: number }
        weight: { type: number }
        pulse: { type: number }
        temperature: { type: number }
        generalCondition: { type: string }
        deferralReason: { type: string }
        notes: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    ProcessDonationLog:
      type: object
      properties:
        _id:
          type: string
          description: Log ID
        registrationId:
          type: string
          description: Blood donation registration ID
        userId:
          type: string
          description: User ID
        changedBy:
          type: object
          description: Staff who made the change
          properties:
            _id:
              type: string
            userId:
              type: object
              properties:
                _id:
                  type: string
                fullName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                avatar:
                  type: string
            position:
              type: string
              enum: [MANAGER, NURSE, DOCTOR]
        status:
          type: string
          enum: [pending_approval, rejected_registration, registered, checked_in, in_consult, rejected, waiting_donation, donating, donated, resting, post_rest_check, completed, cancelled]
          description: Status of the registration
        notes:
          type: string
          description: Additional notes
        changedAt:
          type: string
          format: date-time
          description: When the change was made
        createdAt:
          type: string
          format: date-time
          description: When the log was created
    RegistrationStatistics:
      type: object
      properties:
        statusDistribution:
          type: array
          description: Distribution of registrations by status
          items:
            type: object
            properties:
              _id:
                type: string
                description: Status
              count:
                type: integer
                description: Number of registrations with this status
        bloodTypeDistribution:
          type: array
          description: Distribution of registrations by blood type
          items:
            type: object
            properties:
              _id:
                type: string
                description: Blood type
              count:
                type: integer
                description: Number of registrations with this blood type
        timeSeries:
          type: array
          description: Time series data for registrations
          items:
            type: object
            properties:
              _id:
                type: string
                description: Time period (depends on groupBy parameter)
              count:
                type: integer
                description: Number of registrations in this period
              totalExpectedQuantity:
                type: number
                description: Total expected blood quantity in this period
        summary:
          type: object
          description: Summary statistics
          properties:
            total:
              type: integer
              description: Total number of registrations
            pending:
              type: integer
              description: Number of pending registrations
            registered:
              type: integer
              description: Number of registered (approved) registrations
            completed:
              type: integer
              description: Number of completed registrations
    DonorStatusLog:
      type: object
      properties:
        _id:
          type: string
          description: Status log ID
        donationId:
          type: object
          description: Associated blood donation
          properties:
            _id:
              type: string
            quantity:
              type: number
            donationDate:
              type: string
              format: date-time
            status:
              type: string
        userId:
          type: object
          description: Donor information
          properties:
            _id:
              type: string
            fullName:
              type: string
            email:
              type: string
            phone:
              type: string
        staffId:
          type: object
          description: Staff who recorded the status
          properties:
            _id:
              type: string
            userId:
              type: object
              properties:
                _id:
                  type: string
                fullName:
                  type: string
                email:
                  type: string
            position:
              type: string
              enum: ["MANAGER", "NURSE", "DOCTOR"]
        status:
          type: string
          enum: ["stable", "fatigued", "needs_monitoring", "other"]
          description: Donor status
        phase:
          type: string
          enum: ["resting", "post_rest_check"]
          description: Current phase
        notes:
          type: string
          description: Additional notes
        recordedAt:
          type: string
          format: date-time
          description: When status was recorded
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BloodUnit:
      type: object
      properties:
        _id:
          type: string
          description: Blood unit ID
        donationId:
          type: object
          description: Associated donation
          properties:
            _id:
              type: string
            userId:
              type: object
              properties:
                _id:
                  type: string
                fullName:
                  type: string
            donationDate:
              type: string
              format: date-time
        facilityId:
          type: object
          description: Facility information
          properties:
            _id:
              type: string
            name:
              type: string
            code:
              type: string
        bloodGroupId:
          type: object
          description: Blood group information
          properties:
            _id:
              type: string
            name:
              type: string
            type:
              type: string
        component:
          type: string
          enum: ["M√°u to√†n ph·∫ßn", "H·ªìng c·∫ßu", "Huy·∫øt t∆∞∆°ng", "Ti·ªÉu c·∫ßu"]
        quantity:
          type: number
        barcode:
          type: string
          description: Unique barcode
        collectedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        status:
          type: string
          enum: ["testing", "available", "rejected", "reserved", "used", "expired"]
        testResults:
          type: object
          properties:
            hiv:
              type: string
              enum: ["positive", "negative", "pending"]
            hepatitisB:
              type: string
              enum: ["positive", "negative", "pending"]
            hepatitisC:
              type: string
              enum: ["positive", "negative", "pending"]
            syphilis:
              type: string
              enum: ["positive", "negative", "pending"]
            bloodType:
              type: string
            notes:
              type: string
        processedBy:
          type: object
          description: Staff who processed the unit
          properties:
            _id:
              type: string
            userId:
              type: object
              properties:
                fullName:
                  type: string
            position:
              type: string
        processedAt:
          type: string
          format: date-time
        approvedBy:
          type: object
          description: Staff who approved the unit
        approvedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BloodInventory:
      type: object
      properties:
        _id:
          type: string
        facilityId:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            code:
              type: string
        componentId:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            description:
              type: string
        groupId:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            type:
              type: string
        totalQuantity:
          type: number
        unitStats:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                description: Status
              count:
                type: integer
              totalQuantity:
                type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BloodInventoryDetail:
      allOf:
        - $ref: "#/components/schemas/BloodInventory"
        - type: object
          properties:
            unitStats:
              type: array
              description: Detailed unit statistics
            expiringUnits:
              type: array
              description: Units expiring soon
              items:
                type: object
                properties:
                  barcode:
                    type: string
                  quantity:
                    type: number
                  expiresAt:
                    type: string
                    format: date-time

    BloodUnitStatistics:
      type: object
      properties:
        statusDistribution:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                description: Status
              count:
                type: integer
              totalQuantity:
                type: number
        componentDistribution:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                description: Component
              count:
                type: integer
              totalQuantity:
                type: number
        expiringUnits:
          type: integer
          description: Number of units expiring in 7 days
        summary:
          type: object
          properties:
            total:
              type: integer
            available:
              type: integer
            testing:
              type: integer
            rejected:
              type: integer

    InventoryStatistics:
      type: object
      properties:
        overallInventory:
          type: array
          description: Inventory by component and blood type
        unitStatusDistribution:
          type: array
          description: Distribution by unit status
        expiringUnits:
          type: integer
          description: Units expiring soon
        expiredUnits:
          type: integer
          description: Expired units count
        summary:
          type: object
          properties:
            totalUnits:
              type: integer
            availableUnits:
              type: integer
            reservedUnits:
              type: integer
            usedUnits:
              type: integer
    
    BloodInventoryWithStats:
      allOf:
        - $ref: "#/components/schemas/BloodInventory"
        - type: object
          properties:
            unitStats:
              type: array
              description: Statistics by unit status
              items:
                type: object
                properties:
                  _id:
                    type: string
                    description: Status (available, reserved, expired, etc.)
                  count:
                    type: integer
                  totalQuantity:
                    type: number

    BloodInventoryDetail:
      allOf:
        - $ref: "#/components/schemas/BloodInventory"
        - type: object
          properties:
            unitStats:
              type: array
              description: Detailed unit statistics
              items:
                type: object
                properties:
                  _id:
                    type: string
                  count:
                    type: integer
                  totalQuantity:
                    type: number
            expiringUnits:
              type: array
              description: Units expiring soon
              items:
                type: object
                properties:
                  quantity:
                    type: number
                  expiresAt:
                    type: string
                    format: date-time
    
    BloodInventoryWithStats:
      allOf:
        - $ref: "#/components/schemas/BloodInventory"
        - type: object
          properties:
            unitStats:
              type: array
              description: Statistics by unit status
              items:
                type: object
                properties:
                  _id:
                    type: string
                    description: Status (available, reserved, expired, etc.)
                  count:
                    type: integer
                  totalQuantity:
                    type: number
    
    ErrorResponse:
      type: object
      properties:
        message:
          type: string

